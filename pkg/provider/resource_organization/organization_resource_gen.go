// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_organization

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func OrganizationResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"cluster_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Flightdeck Cluster that manages this Organization.",
				MarkdownDescription: "The ID of the Flightdeck Cluster that manages this Organization.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time of the resources creation.",
				MarkdownDescription: "The date and time of the resources creation.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Flightdeck resource.",
				MarkdownDescription: "The ID of the Flightdeck resource.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Flightdeck Organization.",
				MarkdownDescription: "The name of the Flightdeck Organization.",
			},
			"owner": schema.StringAttribute{
				Computed:            true,
				Description:         "The Flightdeck User ID of the Organization's owner.",
				MarkdownDescription: "The Flightdeck User ID of the Organization's owner.",
			},
			"subdomain": schema.StringAttribute{
				Computed:            true,
				Description:         "The designated Flightdeck subdomain for this Organization.",
				MarkdownDescription: "The designated Flightdeck subdomain for this Organization.",
			},
			"subscription": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"entitlements": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"connections": schema.Int64Attribute{
								Required:            true,
								Description:         "The number of Flightdeck Connections that this Organization is entitled to",
								MarkdownDescription: "The number of Flightdeck Connections that this Organization is entitled to",
							},
							"portals": schema.Int64Attribute{
								Required:            true,
								Description:         "The number of Flightdeck Portals that this Organization is entitled to.",
								MarkdownDescription: "The number of Flightdeck Portals that this Organization is entitled to.",
							},
							"tenant_users": schema.Int64Attribute{
								Required:            true,
								Description:         "The number of Flightdeck Tenant Users that this Organization is entitled to",
								MarkdownDescription: "The number of Flightdeck Tenant Users that this Organization is entitled to",
							},
							"tenants": schema.Int64Attribute{
								Required:            true,
								Description:         "The number of Flightdeck Tenants that this Organization is entitled to",
								MarkdownDescription: "The number of Flightdeck Tenants that this Organization is entitled to",
							},
						},
						CustomType: EntitlementsType{
							ObjectType: types.ObjectType{
								AttrTypes: EntitlementsValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
						Computed: true,
					},
					"status": schema.StringAttribute{
						Required: true,
					},
				},
				CustomType: SubscriptionType{
					ObjectType: types.ObjectType{
						AttrTypes: SubscriptionValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
		},
		Description: "Represents a Flightdeck Organization.",
	}
}

type OrganizationModel struct {
	ClusterId    types.String      `tfsdk:"cluster_id"`
	CreatedAt    types.String      `tfsdk:"created_at"`
	Id           types.String      `tfsdk:"id"`
	Name         types.String      `tfsdk:"name"`
	Owner        types.String      `tfsdk:"owner"`
	Subdomain    types.String      `tfsdk:"subdomain"`
	Subscription SubscriptionValue `tfsdk:"subscription"`
}

var _ basetypes.ObjectTypable = SubscriptionType{}

type SubscriptionType struct {
	basetypes.ObjectType
}

func (t SubscriptionType) Equal(o attr.Type) bool {
	other, ok := o.(SubscriptionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t SubscriptionType) String() string {
	return "SubscriptionType"
}

func (t SubscriptionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	entitlementsAttribute, ok := attributes["entitlements"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`entitlements is missing from object`)

		return nil, diags
	}

	entitlementsVal, ok := entitlementsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`entitlements expected to be basetypes.ObjectValue, was: %T`, entitlementsAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return nil, diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return SubscriptionValue{
		Entitlements: entitlementsVal,
		Status:       statusVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewSubscriptionValueNull() SubscriptionValue {
	return SubscriptionValue{
		state: attr.ValueStateNull,
	}
}

func NewSubscriptionValueUnknown() SubscriptionValue {
	return SubscriptionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewSubscriptionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (SubscriptionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing SubscriptionValue Attribute Value",
				"While creating a SubscriptionValue value, a missing attribute value was detected. "+
					"A SubscriptionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SubscriptionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid SubscriptionValue Attribute Type",
				"While creating a SubscriptionValue value, an invalid attribute value was detected. "+
					"A SubscriptionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("SubscriptionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("SubscriptionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra SubscriptionValue Attribute Value",
				"While creating a SubscriptionValue value, an extra attribute value was detected. "+
					"A SubscriptionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra SubscriptionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewSubscriptionValueUnknown(), diags
	}

	entitlementsAttribute, ok := attributes["entitlements"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`entitlements is missing from object`)

		return NewSubscriptionValueUnknown(), diags
	}

	entitlementsVal, ok := entitlementsAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`entitlements expected to be basetypes.ObjectValue, was: %T`, entitlementsAttribute))
	}

	statusAttribute, ok := attributes["status"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`status is missing from object`)

		return NewSubscriptionValueUnknown(), diags
	}

	statusVal, ok := statusAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`status expected to be basetypes.StringValue, was: %T`, statusAttribute))
	}

	if diags.HasError() {
		return NewSubscriptionValueUnknown(), diags
	}

	return SubscriptionValue{
		Entitlements: entitlementsVal,
		Status:       statusVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewSubscriptionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) SubscriptionValue {
	object, diags := NewSubscriptionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewSubscriptionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t SubscriptionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewSubscriptionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewSubscriptionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewSubscriptionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewSubscriptionValueMust(SubscriptionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t SubscriptionType) ValueType(ctx context.Context) attr.Value {
	return SubscriptionValue{}
}

var _ basetypes.ObjectValuable = SubscriptionValue{}

type SubscriptionValue struct {
	Entitlements basetypes.ObjectValue `tfsdk:"entitlements"`
	Status       basetypes.StringValue `tfsdk:"status"`
	state        attr.ValueState
}

func (v SubscriptionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["entitlements"] = basetypes.ObjectType{
		AttrTypes: EntitlementsValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["status"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Entitlements.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["entitlements"] = val

		val, err = v.Status.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["status"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v SubscriptionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v SubscriptionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v SubscriptionValue) String() string {
	return "SubscriptionValue"
}

func (v SubscriptionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var entitlements basetypes.ObjectValue

	if v.Entitlements.IsNull() {
		entitlements = types.ObjectNull(
			EntitlementsValue{}.AttributeTypes(ctx),
		)
	}

	if v.Entitlements.IsUnknown() {
		entitlements = types.ObjectUnknown(
			EntitlementsValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Entitlements.IsNull() && !v.Entitlements.IsUnknown() {
		entitlements = types.ObjectValueMust(
			EntitlementsValue{}.AttributeTypes(ctx),
			v.Entitlements.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"entitlements": basetypes.ObjectType{
			AttrTypes: EntitlementsValue{}.AttributeTypes(ctx),
		},
		"status": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"entitlements": entitlements,
			"status":       v.Status,
		})

	return objVal, diags
}

func (v SubscriptionValue) Equal(o attr.Value) bool {
	other, ok := o.(SubscriptionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Entitlements.Equal(other.Entitlements) {
		return false
	}

	if !v.Status.Equal(other.Status) {
		return false
	}

	return true
}

func (v SubscriptionValue) Type(ctx context.Context) attr.Type {
	return SubscriptionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v SubscriptionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"entitlements": basetypes.ObjectType{
			AttrTypes: EntitlementsValue{}.AttributeTypes(ctx),
		},
		"status": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = EntitlementsType{}

type EntitlementsType struct {
	basetypes.ObjectType
}

func (t EntitlementsType) Equal(o attr.Type) bool {
	other, ok := o.(EntitlementsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t EntitlementsType) String() string {
	return "EntitlementsType"
}

func (t EntitlementsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	connectionsAttribute, ok := attributes["connections"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connections is missing from object`)

		return nil, diags
	}

	connectionsVal, ok := connectionsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connections expected to be basetypes.Int64Value, was: %T`, connectionsAttribute))
	}

	portalsAttribute, ok := attributes["portals"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`portals is missing from object`)

		return nil, diags
	}

	portalsVal, ok := portalsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`portals expected to be basetypes.Int64Value, was: %T`, portalsAttribute))
	}

	tenantUsersAttribute, ok := attributes["tenant_users"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenant_users is missing from object`)

		return nil, diags
	}

	tenantUsersVal, ok := tenantUsersAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenant_users expected to be basetypes.Int64Value, was: %T`, tenantUsersAttribute))
	}

	tenantsAttribute, ok := attributes["tenants"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenants is missing from object`)

		return nil, diags
	}

	tenantsVal, ok := tenantsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenants expected to be basetypes.Int64Value, was: %T`, tenantsAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return EntitlementsValue{
		Connections: connectionsVal,
		Portals:     portalsVal,
		TenantUsers: tenantUsersVal,
		Tenants:     tenantsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewEntitlementsValueNull() EntitlementsValue {
	return EntitlementsValue{
		state: attr.ValueStateNull,
	}
}

func NewEntitlementsValueUnknown() EntitlementsValue {
	return EntitlementsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewEntitlementsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (EntitlementsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing EntitlementsValue Attribute Value",
				"While creating a EntitlementsValue value, a missing attribute value was detected. "+
					"A EntitlementsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EntitlementsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid EntitlementsValue Attribute Type",
				"While creating a EntitlementsValue value, an invalid attribute value was detected. "+
					"A EntitlementsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("EntitlementsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("EntitlementsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra EntitlementsValue Attribute Value",
				"While creating a EntitlementsValue value, an extra attribute value was detected. "+
					"A EntitlementsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra EntitlementsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewEntitlementsValueUnknown(), diags
	}

	connectionsAttribute, ok := attributes["connections"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`connections is missing from object`)

		return NewEntitlementsValueUnknown(), diags
	}

	connectionsVal, ok := connectionsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`connections expected to be basetypes.Int64Value, was: %T`, connectionsAttribute))
	}

	portalsAttribute, ok := attributes["portals"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`portals is missing from object`)

		return NewEntitlementsValueUnknown(), diags
	}

	portalsVal, ok := portalsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`portals expected to be basetypes.Int64Value, was: %T`, portalsAttribute))
	}

	tenantUsersAttribute, ok := attributes["tenant_users"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenant_users is missing from object`)

		return NewEntitlementsValueUnknown(), diags
	}

	tenantUsersVal, ok := tenantUsersAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenant_users expected to be basetypes.Int64Value, was: %T`, tenantUsersAttribute))
	}

	tenantsAttribute, ok := attributes["tenants"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`tenants is missing from object`)

		return NewEntitlementsValueUnknown(), diags
	}

	tenantsVal, ok := tenantsAttribute.(basetypes.Int64Value)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`tenants expected to be basetypes.Int64Value, was: %T`, tenantsAttribute))
	}

	if diags.HasError() {
		return NewEntitlementsValueUnknown(), diags
	}

	return EntitlementsValue{
		Connections: connectionsVal,
		Portals:     portalsVal,
		TenantUsers: tenantUsersVal,
		Tenants:     tenantsVal,
		state:       attr.ValueStateKnown,
	}, diags
}

func NewEntitlementsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) EntitlementsValue {
	object, diags := NewEntitlementsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewEntitlementsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t EntitlementsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewEntitlementsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewEntitlementsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewEntitlementsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewEntitlementsValueMust(EntitlementsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t EntitlementsType) ValueType(ctx context.Context) attr.Value {
	return EntitlementsValue{}
}

var _ basetypes.ObjectValuable = EntitlementsValue{}

type EntitlementsValue struct {
	Connections basetypes.Int64Value `tfsdk:"connections"`
	Portals     basetypes.Int64Value `tfsdk:"portals"`
	TenantUsers basetypes.Int64Value `tfsdk:"tenant_users"`
	Tenants     basetypes.Int64Value `tfsdk:"tenants"`
	state       attr.ValueState
}

func (v EntitlementsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["connections"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["portals"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["tenant_users"] = basetypes.Int64Type{}.TerraformType(ctx)
	attrTypes["tenants"] = basetypes.Int64Type{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.Connections.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["connections"] = val

		val, err = v.Portals.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["portals"] = val

		val, err = v.TenantUsers.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tenant_users"] = val

		val, err = v.Tenants.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["tenants"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v EntitlementsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v EntitlementsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v EntitlementsValue) String() string {
	return "EntitlementsValue"
}

func (v EntitlementsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"connections":  basetypes.Int64Type{},
		"portals":      basetypes.Int64Type{},
		"tenant_users": basetypes.Int64Type{},
		"tenants":      basetypes.Int64Type{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"connections":  v.Connections,
			"portals":      v.Portals,
			"tenant_users": v.TenantUsers,
			"tenants":      v.Tenants,
		})

	return objVal, diags
}

func (v EntitlementsValue) Equal(o attr.Value) bool {
	other, ok := o.(EntitlementsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Connections.Equal(other.Connections) {
		return false
	}

	if !v.Portals.Equal(other.Portals) {
		return false
	}

	if !v.TenantUsers.Equal(other.TenantUsers) {
		return false
	}

	if !v.Tenants.Equal(other.Tenants) {
		return false
	}

	return true
}

func (v EntitlementsValue) Type(ctx context.Context) attr.Type {
	return EntitlementsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v EntitlementsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"connections":  basetypes.Int64Type{},
		"portals":      basetypes.Int64Type{},
		"tenant_users": basetypes.Int64Type{},
		"tenants":      basetypes.Int64Type{},
	}
}
