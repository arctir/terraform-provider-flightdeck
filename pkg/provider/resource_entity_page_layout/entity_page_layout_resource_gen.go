// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_entity_page_layout

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func EntityPageLayoutResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"active": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether the Flightdeck Page Layout is the activated.",
				MarkdownDescription: "Indicates whether the Flightdeck Page Layout is the activated.",
			},
			"card_order": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"config": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Configuration for the Entity Page Extension.",
							MarkdownDescription: "Configuration for the Entity Page Extension.",
						},
						"filters": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "Named filters for this Entity Page Extension.",
							MarkdownDescription: "Named filters for this Entity Page Extension.",
						},
						"path": schema.StringAttribute{
							Required:            true,
							Description:         "The unique Entity Page Extension path.",
							MarkdownDescription: "The unique Entity Page Extension path.",
						},
					},
					CustomType: CardOrderType{
						ObjectType: types.ObjectType{
							AttrTypes: CardOrderValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The order in which to display Entity Card components.",
				MarkdownDescription: "The order in which to display Entity Card components.",
			},
			"content_order": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"config": schema.StringAttribute{
							Optional:            true,
							Computed:            true,
							Description:         "Configuration for the Entity Page Extension.",
							MarkdownDescription: "Configuration for the Entity Page Extension.",
						},
						"filters": schema.ListAttribute{
							ElementType:         types.StringType,
							Optional:            true,
							Computed:            true,
							Description:         "Named filters for this Entity Page Extension.",
							MarkdownDescription: "Named filters for this Entity Page Extension.",
						},
						"path": schema.StringAttribute{
							Required:            true,
							Description:         "The unique Entity Page Extension path.",
							MarkdownDescription: "The unique Entity Page Extension path.",
						},
					},
					CustomType: ContentOrderType{
						ObjectType: types.ObjectType{
							AttrTypes: ContentOrderValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The order in which to display Entity Content pages.",
				MarkdownDescription: "The order in which to display Entity Content pages.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time of the resources creation.",
				MarkdownDescription: "The date and time of the resources creation.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Flightdeck resource.",
				MarkdownDescription: "The ID of the Flightdeck resource.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Flightdeck Entity Page Layout resource.",
				MarkdownDescription: "The name of the Flightdeck Entity Page Layout resource.",
			},
			"organization_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Flightdeck Organization resource.",
				MarkdownDescription: "The ID of the Flightdeck Organization resource.",
			},
			"portal_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Flightdeck Portal resource.",
				MarkdownDescription: "The name of the Flightdeck Portal resource.",
			},
		},
		Description: "Represents a Flightdeck Entity Page Layout resource.",
	}
}

type EntityPageLayoutModel struct {
	Active         types.Bool   `tfsdk:"active"`
	CardOrder      types.List   `tfsdk:"card_order"`
	ContentOrder   types.List   `tfsdk:"content_order"`
	CreatedAt      types.String `tfsdk:"created_at"`
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	OrganizationId types.String `tfsdk:"organization_id"`
	PortalName     types.String `tfsdk:"portal_name"`
}

var _ basetypes.ObjectTypable = CardOrderType{}

type CardOrderType struct {
	basetypes.ObjectType
}

func (t CardOrderType) Equal(o attr.Type) bool {
	other, ok := o.(CardOrderType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t CardOrderType) String() string {
	return "CardOrderType"
}

func (t CardOrderType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return nil, diags
	}

	configVal, ok := configAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.StringValue, was: %T`, configAttribute))
	}

	filtersAttribute, ok := attributes["filters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filters is missing from object`)

		return nil, diags
	}

	filtersVal, ok := filtersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filters expected to be basetypes.ListValue, was: %T`, filtersAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return nil, diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return CardOrderValue{
		Config:  configVal,
		Filters: filtersVal,
		Path:    pathVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewCardOrderValueNull() CardOrderValue {
	return CardOrderValue{
		state: attr.ValueStateNull,
	}
}

func NewCardOrderValueUnknown() CardOrderValue {
	return CardOrderValue{
		state: attr.ValueStateUnknown,
	}
}

func NewCardOrderValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (CardOrderValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing CardOrderValue Attribute Value",
				"While creating a CardOrderValue value, a missing attribute value was detected. "+
					"A CardOrderValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CardOrderValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid CardOrderValue Attribute Type",
				"While creating a CardOrderValue value, an invalid attribute value was detected. "+
					"A CardOrderValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("CardOrderValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("CardOrderValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra CardOrderValue Attribute Value",
				"While creating a CardOrderValue value, an extra attribute value was detected. "+
					"A CardOrderValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra CardOrderValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewCardOrderValueUnknown(), diags
	}

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return NewCardOrderValueUnknown(), diags
	}

	configVal, ok := configAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.StringValue, was: %T`, configAttribute))
	}

	filtersAttribute, ok := attributes["filters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filters is missing from object`)

		return NewCardOrderValueUnknown(), diags
	}

	filtersVal, ok := filtersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filters expected to be basetypes.ListValue, was: %T`, filtersAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return NewCardOrderValueUnknown(), diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	if diags.HasError() {
		return NewCardOrderValueUnknown(), diags
	}

	return CardOrderValue{
		Config:  configVal,
		Filters: filtersVal,
		Path:    pathVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewCardOrderValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) CardOrderValue {
	object, diags := NewCardOrderValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewCardOrderValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t CardOrderType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewCardOrderValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewCardOrderValueUnknown(), nil
	}

	if in.IsNull() {
		return NewCardOrderValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewCardOrderValueMust(CardOrderValue{}.AttributeTypes(ctx), attributes), nil
}

func (t CardOrderType) ValueType(ctx context.Context) attr.Value {
	return CardOrderValue{}
}

var _ basetypes.ObjectValuable = CardOrderValue{}

type CardOrderValue struct {
	Config  basetypes.StringValue `tfsdk:"config"`
	Filters basetypes.ListValue   `tfsdk:"filters"`
	Path    basetypes.StringValue `tfsdk:"path"`
	state   attr.ValueState
}

func (v CardOrderValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["filters"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["path"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Config.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["config"] = val

		val, err = v.Filters.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["filters"] = val

		val, err = v.Path.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["path"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v CardOrderValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v CardOrderValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v CardOrderValue) String() string {
	return "CardOrderValue"
}

func (v CardOrderValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var filtersVal basetypes.ListValue
	switch {
	case v.Filters.IsUnknown():
		filtersVal = types.ListUnknown(types.StringType)
	case v.Filters.IsNull():
		filtersVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		filtersVal, d = types.ListValue(types.StringType, v.Filters.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"config": basetypes.StringType{},
			"filters": basetypes.ListType{
				ElemType: types.StringType,
			},
			"path": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"config": basetypes.StringType{},
		"filters": basetypes.ListType{
			ElemType: types.StringType,
		},
		"path": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"config":  v.Config,
			"filters": filtersVal,
			"path":    v.Path,
		})

	return objVal, diags
}

func (v CardOrderValue) Equal(o attr.Value) bool {
	other, ok := o.(CardOrderValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Config.Equal(other.Config) {
		return false
	}

	if !v.Filters.Equal(other.Filters) {
		return false
	}

	if !v.Path.Equal(other.Path) {
		return false
	}

	return true
}

func (v CardOrderValue) Type(ctx context.Context) attr.Type {
	return CardOrderType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v CardOrderValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"config": basetypes.StringType{},
		"filters": basetypes.ListType{
			ElemType: types.StringType,
		},
		"path": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = ContentOrderType{}

type ContentOrderType struct {
	basetypes.ObjectType
}

func (t ContentOrderType) Equal(o attr.Type) bool {
	other, ok := o.(ContentOrderType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t ContentOrderType) String() string {
	return "ContentOrderType"
}

func (t ContentOrderType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return nil, diags
	}

	configVal, ok := configAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.StringValue, was: %T`, configAttribute))
	}

	filtersAttribute, ok := attributes["filters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filters is missing from object`)

		return nil, diags
	}

	filtersVal, ok := filtersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filters expected to be basetypes.ListValue, was: %T`, filtersAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return nil, diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return ContentOrderValue{
		Config:  configVal,
		Filters: filtersVal,
		Path:    pathVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewContentOrderValueNull() ContentOrderValue {
	return ContentOrderValue{
		state: attr.ValueStateNull,
	}
}

func NewContentOrderValueUnknown() ContentOrderValue {
	return ContentOrderValue{
		state: attr.ValueStateUnknown,
	}
}

func NewContentOrderValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (ContentOrderValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing ContentOrderValue Attribute Value",
				"While creating a ContentOrderValue value, a missing attribute value was detected. "+
					"A ContentOrderValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ContentOrderValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid ContentOrderValue Attribute Type",
				"While creating a ContentOrderValue value, an invalid attribute value was detected. "+
					"A ContentOrderValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("ContentOrderValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("ContentOrderValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra ContentOrderValue Attribute Value",
				"While creating a ContentOrderValue value, an extra attribute value was detected. "+
					"A ContentOrderValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra ContentOrderValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewContentOrderValueUnknown(), diags
	}

	configAttribute, ok := attributes["config"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`config is missing from object`)

		return NewContentOrderValueUnknown(), diags
	}

	configVal, ok := configAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`config expected to be basetypes.StringValue, was: %T`, configAttribute))
	}

	filtersAttribute, ok := attributes["filters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filters is missing from object`)

		return NewContentOrderValueUnknown(), diags
	}

	filtersVal, ok := filtersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filters expected to be basetypes.ListValue, was: %T`, filtersAttribute))
	}

	pathAttribute, ok := attributes["path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`path is missing from object`)

		return NewContentOrderValueUnknown(), diags
	}

	pathVal, ok := pathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`path expected to be basetypes.StringValue, was: %T`, pathAttribute))
	}

	if diags.HasError() {
		return NewContentOrderValueUnknown(), diags
	}

	return ContentOrderValue{
		Config:  configVal,
		Filters: filtersVal,
		Path:    pathVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewContentOrderValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) ContentOrderValue {
	object, diags := NewContentOrderValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewContentOrderValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t ContentOrderType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewContentOrderValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewContentOrderValueUnknown(), nil
	}

	if in.IsNull() {
		return NewContentOrderValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewContentOrderValueMust(ContentOrderValue{}.AttributeTypes(ctx), attributes), nil
}

func (t ContentOrderType) ValueType(ctx context.Context) attr.Value {
	return ContentOrderValue{}
}

var _ basetypes.ObjectValuable = ContentOrderValue{}

type ContentOrderValue struct {
	Config  basetypes.StringValue `tfsdk:"config"`
	Filters basetypes.ListValue   `tfsdk:"filters"`
	Path    basetypes.StringValue `tfsdk:"path"`
	state   attr.ValueState
}

func (v ContentOrderValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 3)

	var val tftypes.Value
	var err error

	attrTypes["config"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["filters"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["path"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 3)

		val, err = v.Config.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["config"] = val

		val, err = v.Filters.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["filters"] = val

		val, err = v.Path.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["path"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v ContentOrderValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v ContentOrderValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v ContentOrderValue) String() string {
	return "ContentOrderValue"
}

func (v ContentOrderValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var filtersVal basetypes.ListValue
	switch {
	case v.Filters.IsUnknown():
		filtersVal = types.ListUnknown(types.StringType)
	case v.Filters.IsNull():
		filtersVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		filtersVal, d = types.ListValue(types.StringType, v.Filters.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"config": basetypes.StringType{},
			"filters": basetypes.ListType{
				ElemType: types.StringType,
			},
			"path": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"config": basetypes.StringType{},
		"filters": basetypes.ListType{
			ElemType: types.StringType,
		},
		"path": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"config":  v.Config,
			"filters": filtersVal,
			"path":    v.Path,
		})

	return objVal, diags
}

func (v ContentOrderValue) Equal(o attr.Value) bool {
	other, ok := o.(ContentOrderValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Config.Equal(other.Config) {
		return false
	}

	if !v.Filters.Equal(other.Filters) {
		return false
	}

	if !v.Path.Equal(other.Path) {
		return false
	}

	return true
}

func (v ContentOrderValue) Type(ctx context.Context) attr.Type {
	return ContentOrderType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v ContentOrderValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"config": basetypes.StringType{},
		"filters": basetypes.ListType{
			ElemType: types.StringType,
		},
		"path": basetypes.StringType{},
	}
}
