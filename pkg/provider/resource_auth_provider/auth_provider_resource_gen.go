// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_auth_provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func AuthProviderResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time of the resources creation.",
				MarkdownDescription: "The date and time of the resources creation.",
			},
			"github": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"additional_scopes": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "Any additional scopes necessary for the Github OAuth2 provider.",
						MarkdownDescription: "Any additional scopes necessary for the Github OAuth2 provider.",
					},
					"callback_url": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The callback URL for the Github OAuth2 provider.",
						MarkdownDescription: "The callback URL for the Github OAuth2 provider.",
					},
					"client_id": schema.StringAttribute{
						Required:            true,
						Description:         "The client ID for the Github OAuth2 provider.",
						MarkdownDescription: "The client ID for the Github OAuth2 provider.",
					},
					"client_secret": schema.StringAttribute{
						Required:            true,
						Sensitive:           true,
						Description:         "The client secret for the Github OAuth2 provider.",
						MarkdownDescription: "The client secret for the Github OAuth2 provider.",
					},
					"enterprise_instance_url": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The instance URL for the Github Enterprise instance.",
						MarkdownDescription: "The instance URL for the Github Enterprise instance.",
					},
				},
				CustomType: GithubType{
					ObjectType: types.ObjectType{
						AttrTypes: GithubValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"gitlab": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"additional_scopes": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "Any additional scopes necessary for the Gitlab OAuth2 provider.",
						MarkdownDescription: "Any additional scopes necessary for the Gitlab OAuth2 provider.",
					},
					"audience": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The audience for the Gitlab OAuth2 provider.",
						MarkdownDescription: "The audience for the Gitlab OAuth2 provider.",
					},
					"callback_url": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The callback URL for the Gitlab OAuth2 provider.",
						MarkdownDescription: "The callback URL for the Gitlab OAuth2 provider.",
					},
					"client_id": schema.StringAttribute{
						Required:            true,
						Description:         "The client ID for the Gitlab OAuth2 provider.",
						MarkdownDescription: "The client ID for the Gitlab OAuth2 provider.",
					},
					"client_secret": schema.StringAttribute{
						Required:            true,
						Sensitive:           true,
						Description:         "The client secret for the Gitlab OAuth2 provider.",
						MarkdownDescription: "The client secret for the Gitlab OAuth2 provider.",
					},
				},
				CustomType: GitlabType{
					ObjectType: types.ObjectType{
						AttrTypes: GitlabValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"google": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"additional_scopes": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "Any additional scopes necessary for the Google OAuth2 provider.",
						MarkdownDescription: "Any additional scopes necessary for the Google OAuth2 provider.",
					},
					"callback_url": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The callback URL for the Google OAuth2 provider.",
						MarkdownDescription: "The callback URL for the Google OAuth2 provider.",
					},
					"client_id": schema.StringAttribute{
						Required:            true,
						Description:         "The client ID for the Google OAuth2 provider.",
						MarkdownDescription: "The client ID for the Google OAuth2 provider.",
					},
					"client_secret": schema.StringAttribute{
						Required:            true,
						Sensitive:           true,
						Description:         "The client secret for the Google OAuth2 provider.",
						MarkdownDescription: "The client secret for the Google OAuth2 provider.",
					},
				},
				CustomType: GoogleType{
					ObjectType: types.ObjectType{
						AttrTypes: GoogleValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Flightdeck resource.",
				MarkdownDescription: "The ID of the Flightdeck resource.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Auth Provider resource.",
				MarkdownDescription: "The name of the Auth Provider resource.",
			},
			"organization_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Flightdeck Organization resource.",
				MarkdownDescription: "The ID of the Flightdeck Organization resource.",
			},
			"portal_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Flightdeck Portal resource.",
				MarkdownDescription: "The name of the Flightdeck Portal resource.",
			},
		},
		Description: "Represents a Flightdeck Auth Provider resource.",
	}
}

type AuthProviderModel struct {
	CreatedAt      types.String `tfsdk:"created_at"`
	Github         GithubValue  `tfsdk:"github"`
	Gitlab         GitlabValue  `tfsdk:"gitlab"`
	Google         GoogleValue  `tfsdk:"google"`
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	OrganizationId types.String `tfsdk:"organization_id"`
	PortalName     types.String `tfsdk:"portal_name"`
}

var _ basetypes.ObjectTypable = GithubType{}

type GithubType struct {
	basetypes.ObjectType
}

func (t GithubType) Equal(o attr.Type) bool {
	other, ok := o.(GithubType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GithubType) String() string {
	return "GithubType"
}

func (t GithubType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	additionalScopesAttribute, ok := attributes["additional_scopes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_scopes is missing from object`)

		return nil, diags
	}

	additionalScopesVal, ok := additionalScopesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_scopes expected to be basetypes.ListValue, was: %T`, additionalScopesAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return nil, diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return nil, diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return nil, diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	enterpriseInstanceUrlAttribute, ok := attributes["enterprise_instance_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enterprise_instance_url is missing from object`)

		return nil, diags
	}

	enterpriseInstanceUrlVal, ok := enterpriseInstanceUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enterprise_instance_url expected to be basetypes.StringValue, was: %T`, enterpriseInstanceUrlAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GithubValue{
		AdditionalScopes:      additionalScopesVal,
		CallbackUrl:           callbackUrlVal,
		ClientId:              clientIdVal,
		ClientSecret:          clientSecretVal,
		EnterpriseInstanceUrl: enterpriseInstanceUrlVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewGithubValueNull() GithubValue {
	return GithubValue{
		state: attr.ValueStateNull,
	}
}

func NewGithubValueUnknown() GithubValue {
	return GithubValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGithubValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GithubValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GithubValue Attribute Value",
				"While creating a GithubValue value, a missing attribute value was detected. "+
					"A GithubValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GithubValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GithubValue Attribute Type",
				"While creating a GithubValue value, an invalid attribute value was detected. "+
					"A GithubValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GithubValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GithubValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GithubValue Attribute Value",
				"While creating a GithubValue value, an extra attribute value was detected. "+
					"A GithubValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GithubValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGithubValueUnknown(), diags
	}

	additionalScopesAttribute, ok := attributes["additional_scopes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_scopes is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	additionalScopesVal, ok := additionalScopesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_scopes expected to be basetypes.ListValue, was: %T`, additionalScopesAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	enterpriseInstanceUrlAttribute, ok := attributes["enterprise_instance_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`enterprise_instance_url is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	enterpriseInstanceUrlVal, ok := enterpriseInstanceUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`enterprise_instance_url expected to be basetypes.StringValue, was: %T`, enterpriseInstanceUrlAttribute))
	}

	if diags.HasError() {
		return NewGithubValueUnknown(), diags
	}

	return GithubValue{
		AdditionalScopes:      additionalScopesVal,
		CallbackUrl:           callbackUrlVal,
		ClientId:              clientIdVal,
		ClientSecret:          clientSecretVal,
		EnterpriseInstanceUrl: enterpriseInstanceUrlVal,
		state:                 attr.ValueStateKnown,
	}, diags
}

func NewGithubValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GithubValue {
	object, diags := NewGithubValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGithubValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GithubType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGithubValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGithubValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGithubValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGithubValueMust(GithubValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GithubType) ValueType(ctx context.Context) attr.Value {
	return GithubValue{}
}

var _ basetypes.ObjectValuable = GithubValue{}

type GithubValue struct {
	AdditionalScopes      basetypes.ListValue   `tfsdk:"additional_scopes"`
	CallbackUrl           basetypes.StringValue `tfsdk:"callback_url"`
	ClientId              basetypes.StringValue `tfsdk:"client_id"`
	ClientSecret          basetypes.StringValue `tfsdk:"client_secret"`
	EnterpriseInstanceUrl basetypes.StringValue `tfsdk:"enterprise_instance_url"`
	state                 attr.ValueState
}

func (v GithubValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["additional_scopes"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["callback_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_secret"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["enterprise_instance_url"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.AdditionalScopes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["additional_scopes"] = val

		val, err = v.CallbackUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["callback_url"] = val

		val, err = v.ClientId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_id"] = val

		val, err = v.ClientSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_secret"] = val

		val, err = v.EnterpriseInstanceUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["enterprise_instance_url"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GithubValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GithubValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GithubValue) String() string {
	return "GithubValue"
}

func (v GithubValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additionalScopesVal basetypes.ListValue
	switch {
	case v.AdditionalScopes.IsUnknown():
		additionalScopesVal = types.ListUnknown(types.StringType)
	case v.AdditionalScopes.IsNull():
		additionalScopesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		additionalScopesVal, d = types.ListValue(types.StringType, v.AdditionalScopes.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"additional_scopes": basetypes.ListType{
				ElemType: types.StringType,
			},
			"callback_url":            basetypes.StringType{},
			"client_id":               basetypes.StringType{},
			"client_secret":           basetypes.StringType{},
			"enterprise_instance_url": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"additional_scopes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"callback_url":            basetypes.StringType{},
		"client_id":               basetypes.StringType{},
		"client_secret":           basetypes.StringType{},
		"enterprise_instance_url": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"additional_scopes":       additionalScopesVal,
			"callback_url":            v.CallbackUrl,
			"client_id":               v.ClientId,
			"client_secret":           v.ClientSecret,
			"enterprise_instance_url": v.EnterpriseInstanceUrl,
		})

	return objVal, diags
}

func (v GithubValue) Equal(o attr.Value) bool {
	other, ok := o.(GithubValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdditionalScopes.Equal(other.AdditionalScopes) {
		return false
	}

	if !v.CallbackUrl.Equal(other.CallbackUrl) {
		return false
	}

	if !v.ClientId.Equal(other.ClientId) {
		return false
	}

	if !v.ClientSecret.Equal(other.ClientSecret) {
		return false
	}

	if !v.EnterpriseInstanceUrl.Equal(other.EnterpriseInstanceUrl) {
		return false
	}

	return true
}

func (v GithubValue) Type(ctx context.Context) attr.Type {
	return GithubType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GithubValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"additional_scopes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"callback_url":            basetypes.StringType{},
		"client_id":               basetypes.StringType{},
		"client_secret":           basetypes.StringType{},
		"enterprise_instance_url": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = GitlabType{}

type GitlabType struct {
	basetypes.ObjectType
}

func (t GitlabType) Equal(o attr.Type) bool {
	other, ok := o.(GitlabType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GitlabType) String() string {
	return "GitlabType"
}

func (t GitlabType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	additionalScopesAttribute, ok := attributes["additional_scopes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_scopes is missing from object`)

		return nil, diags
	}

	additionalScopesVal, ok := additionalScopesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_scopes expected to be basetypes.ListValue, was: %T`, additionalScopesAttribute))
	}

	audienceAttribute, ok := attributes["audience"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`audience is missing from object`)

		return nil, diags
	}

	audienceVal, ok := audienceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`audience expected to be basetypes.StringValue, was: %T`, audienceAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return nil, diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return nil, diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return nil, diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GitlabValue{
		AdditionalScopes: additionalScopesVal,
		Audience:         audienceVal,
		CallbackUrl:      callbackUrlVal,
		ClientId:         clientIdVal,
		ClientSecret:     clientSecretVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewGitlabValueNull() GitlabValue {
	return GitlabValue{
		state: attr.ValueStateNull,
	}
}

func NewGitlabValueUnknown() GitlabValue {
	return GitlabValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGitlabValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GitlabValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GitlabValue Attribute Value",
				"While creating a GitlabValue value, a missing attribute value was detected. "+
					"A GitlabValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GitlabValue Attribute Type",
				"While creating a GitlabValue value, an invalid attribute value was detected. "+
					"A GitlabValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GitlabValue Attribute Value",
				"While creating a GitlabValue value, an extra attribute value was detected. "+
					"A GitlabValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GitlabValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGitlabValueUnknown(), diags
	}

	additionalScopesAttribute, ok := attributes["additional_scopes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_scopes is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	additionalScopesVal, ok := additionalScopesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_scopes expected to be basetypes.ListValue, was: %T`, additionalScopesAttribute))
	}

	audienceAttribute, ok := attributes["audience"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`audience is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	audienceVal, ok := audienceAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`audience expected to be basetypes.StringValue, was: %T`, audienceAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	if diags.HasError() {
		return NewGitlabValueUnknown(), diags
	}

	return GitlabValue{
		AdditionalScopes: additionalScopesVal,
		Audience:         audienceVal,
		CallbackUrl:      callbackUrlVal,
		ClientId:         clientIdVal,
		ClientSecret:     clientSecretVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewGitlabValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GitlabValue {
	object, diags := NewGitlabValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGitlabValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GitlabType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGitlabValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGitlabValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGitlabValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGitlabValueMust(GitlabValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GitlabType) ValueType(ctx context.Context) attr.Value {
	return GitlabValue{}
}

var _ basetypes.ObjectValuable = GitlabValue{}

type GitlabValue struct {
	AdditionalScopes basetypes.ListValue   `tfsdk:"additional_scopes"`
	Audience         basetypes.StringValue `tfsdk:"audience"`
	CallbackUrl      basetypes.StringValue `tfsdk:"callback_url"`
	ClientId         basetypes.StringValue `tfsdk:"client_id"`
	ClientSecret     basetypes.StringValue `tfsdk:"client_secret"`
	state            attr.ValueState
}

func (v GitlabValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["additional_scopes"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["audience"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["callback_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_secret"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.AdditionalScopes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["additional_scopes"] = val

		val, err = v.Audience.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["audience"] = val

		val, err = v.CallbackUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["callback_url"] = val

		val, err = v.ClientId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_id"] = val

		val, err = v.ClientSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_secret"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GitlabValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GitlabValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GitlabValue) String() string {
	return "GitlabValue"
}

func (v GitlabValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additionalScopesVal basetypes.ListValue
	switch {
	case v.AdditionalScopes.IsUnknown():
		additionalScopesVal = types.ListUnknown(types.StringType)
	case v.AdditionalScopes.IsNull():
		additionalScopesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		additionalScopesVal, d = types.ListValue(types.StringType, v.AdditionalScopes.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"additional_scopes": basetypes.ListType{
				ElemType: types.StringType,
			},
			"audience":      basetypes.StringType{},
			"callback_url":  basetypes.StringType{},
			"client_id":     basetypes.StringType{},
			"client_secret": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"additional_scopes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"audience":      basetypes.StringType{},
		"callback_url":  basetypes.StringType{},
		"client_id":     basetypes.StringType{},
		"client_secret": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"additional_scopes": additionalScopesVal,
			"audience":          v.Audience,
			"callback_url":      v.CallbackUrl,
			"client_id":         v.ClientId,
			"client_secret":     v.ClientSecret,
		})

	return objVal, diags
}

func (v GitlabValue) Equal(o attr.Value) bool {
	other, ok := o.(GitlabValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdditionalScopes.Equal(other.AdditionalScopes) {
		return false
	}

	if !v.Audience.Equal(other.Audience) {
		return false
	}

	if !v.CallbackUrl.Equal(other.CallbackUrl) {
		return false
	}

	if !v.ClientId.Equal(other.ClientId) {
		return false
	}

	if !v.ClientSecret.Equal(other.ClientSecret) {
		return false
	}

	return true
}

func (v GitlabValue) Type(ctx context.Context) attr.Type {
	return GitlabType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GitlabValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"additional_scopes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"audience":      basetypes.StringType{},
		"callback_url":  basetypes.StringType{},
		"client_id":     basetypes.StringType{},
		"client_secret": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = GoogleType{}

type GoogleType struct {
	basetypes.ObjectType
}

func (t GoogleType) Equal(o attr.Type) bool {
	other, ok := o.(GoogleType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GoogleType) String() string {
	return "GoogleType"
}

func (t GoogleType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	additionalScopesAttribute, ok := attributes["additional_scopes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_scopes is missing from object`)

		return nil, diags
	}

	additionalScopesVal, ok := additionalScopesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_scopes expected to be basetypes.ListValue, was: %T`, additionalScopesAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return nil, diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return nil, diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return nil, diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GoogleValue{
		AdditionalScopes: additionalScopesVal,
		CallbackUrl:      callbackUrlVal,
		ClientId:         clientIdVal,
		ClientSecret:     clientSecretVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewGoogleValueNull() GoogleValue {
	return GoogleValue{
		state: attr.ValueStateNull,
	}
}

func NewGoogleValueUnknown() GoogleValue {
	return GoogleValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGoogleValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GoogleValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GoogleValue Attribute Value",
				"While creating a GoogleValue value, a missing attribute value was detected. "+
					"A GoogleValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GoogleValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GoogleValue Attribute Type",
				"While creating a GoogleValue value, an invalid attribute value was detected. "+
					"A GoogleValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GoogleValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GoogleValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GoogleValue Attribute Value",
				"While creating a GoogleValue value, an extra attribute value was detected. "+
					"A GoogleValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GoogleValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGoogleValueUnknown(), diags
	}

	additionalScopesAttribute, ok := attributes["additional_scopes"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`additional_scopes is missing from object`)

		return NewGoogleValueUnknown(), diags
	}

	additionalScopesVal, ok := additionalScopesAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`additional_scopes expected to be basetypes.ListValue, was: %T`, additionalScopesAttribute))
	}

	callbackUrlAttribute, ok := attributes["callback_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`callback_url is missing from object`)

		return NewGoogleValueUnknown(), diags
	}

	callbackUrlVal, ok := callbackUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`callback_url expected to be basetypes.StringValue, was: %T`, callbackUrlAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return NewGoogleValueUnknown(), diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return NewGoogleValueUnknown(), diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	if diags.HasError() {
		return NewGoogleValueUnknown(), diags
	}

	return GoogleValue{
		AdditionalScopes: additionalScopesVal,
		CallbackUrl:      callbackUrlVal,
		ClientId:         clientIdVal,
		ClientSecret:     clientSecretVal,
		state:            attr.ValueStateKnown,
	}, diags
}

func NewGoogleValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GoogleValue {
	object, diags := NewGoogleValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGoogleValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GoogleType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGoogleValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGoogleValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGoogleValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGoogleValueMust(GoogleValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GoogleType) ValueType(ctx context.Context) attr.Value {
	return GoogleValue{}
}

var _ basetypes.ObjectValuable = GoogleValue{}

type GoogleValue struct {
	AdditionalScopes basetypes.ListValue   `tfsdk:"additional_scopes"`
	CallbackUrl      basetypes.StringValue `tfsdk:"callback_url"`
	ClientId         basetypes.StringValue `tfsdk:"client_id"`
	ClientSecret     basetypes.StringValue `tfsdk:"client_secret"`
	state            attr.ValueState
}

func (v GoogleValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["additional_scopes"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["callback_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_secret"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.AdditionalScopes.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["additional_scopes"] = val

		val, err = v.CallbackUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["callback_url"] = val

		val, err = v.ClientId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_id"] = val

		val, err = v.ClientSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_secret"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GoogleValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GoogleValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GoogleValue) String() string {
	return "GoogleValue"
}

func (v GoogleValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var additionalScopesVal basetypes.ListValue
	switch {
	case v.AdditionalScopes.IsUnknown():
		additionalScopesVal = types.ListUnknown(types.StringType)
	case v.AdditionalScopes.IsNull():
		additionalScopesVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		additionalScopesVal, d = types.ListValue(types.StringType, v.AdditionalScopes.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"additional_scopes": basetypes.ListType{
				ElemType: types.StringType,
			},
			"callback_url":  basetypes.StringType{},
			"client_id":     basetypes.StringType{},
			"client_secret": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"additional_scopes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"callback_url":  basetypes.StringType{},
		"client_id":     basetypes.StringType{},
		"client_secret": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"additional_scopes": additionalScopesVal,
			"callback_url":      v.CallbackUrl,
			"client_id":         v.ClientId,
			"client_secret":     v.ClientSecret,
		})

	return objVal, diags
}

func (v GoogleValue) Equal(o attr.Value) bool {
	other, ok := o.(GoogleValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AdditionalScopes.Equal(other.AdditionalScopes) {
		return false
	}

	if !v.CallbackUrl.Equal(other.CallbackUrl) {
		return false
	}

	if !v.ClientId.Equal(other.ClientId) {
		return false
	}

	if !v.ClientSecret.Equal(other.ClientSecret) {
		return false
	}

	return true
}

func (v GoogleValue) Type(ctx context.Context) attr.Type {
	return GoogleType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GoogleValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"additional_scopes": basetypes.ListType{
			ElemType: types.StringType,
		},
		"callback_url":  basetypes.StringType{},
		"client_id":     basetypes.StringType{},
		"client_secret": basetypes.StringType{},
	}
}
