// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_plugin_configuration

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func PluginConfigurationResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"backend_config": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The configuration of the Plugin on the backend.",
				MarkdownDescription: "The configuration of the Plugin on the backend.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time of the resources creation.",
				MarkdownDescription: "The date and time of the resources creation.",
			},
			"definition": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "The name of the Plugin Definition.",
						MarkdownDescription: "The name of the Plugin Definition.",
					},
					"portal_version_id": schema.StringAttribute{
						Required:            true,
						Description:         "The ID of the Flightdeck Portal Version for the Plugin Definition.",
						MarkdownDescription: "The ID of the Flightdeck Portal Version for the Plugin Definition.",
					},
				},
				CustomType: DefinitionType{
					ObjectType: types.ObjectType{
						AttrTypes: DefinitionValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"enabled": schema.BoolAttribute{
				Required:            true,
				Description:         "Indicates whether the Plugin Configuration is enabled.",
				MarkdownDescription: "Indicates whether the Plugin Configuration is enabled.",
			},
			"frontend_config": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The configuration of the Plugin on the frontend.",
				MarkdownDescription: "The configuration of the Plugin on the frontend.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Flightdeck resource.",
				MarkdownDescription: "The ID of the Flightdeck resource.",
			},
			"organization_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Flightdeck Organization resource.",
				MarkdownDescription: "The ID of the Flightdeck Organization resource.",
			},
			"portal_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Flightdeck Portal resource.",
				MarkdownDescription: "The name of the Flightdeck Portal resource.",
			},
		},
		Description: "Represents a Plugin Configuration resource.",
	}
}

type PluginConfigurationModel struct {
	BackendConfig  types.String    `tfsdk:"backend_config"`
	CreatedAt      types.String    `tfsdk:"created_at"`
	Definition     DefinitionValue `tfsdk:"definition"`
	Enabled        types.Bool      `tfsdk:"enabled"`
	FrontendConfig types.String    `tfsdk:"frontend_config"`
	Id             types.String    `tfsdk:"id"`
	OrganizationId types.String    `tfsdk:"organization_id"`
	PortalName     types.String    `tfsdk:"portal_name"`
}

var _ basetypes.ObjectTypable = DefinitionType{}

type DefinitionType struct {
	basetypes.ObjectType
}

func (t DefinitionType) Equal(o attr.Type) bool {
	other, ok := o.(DefinitionType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t DefinitionType) String() string {
	return "DefinitionType"
}

func (t DefinitionType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	portalVersionIdAttribute, ok := attributes["portal_version_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`portal_version_id is missing from object`)

		return nil, diags
	}

	portalVersionIdVal, ok := portalVersionIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`portal_version_id expected to be basetypes.StringValue, was: %T`, portalVersionIdAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return DefinitionValue{
		Name:            nameVal,
		PortalVersionId: portalVersionIdVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewDefinitionValueNull() DefinitionValue {
	return DefinitionValue{
		state: attr.ValueStateNull,
	}
}

func NewDefinitionValueUnknown() DefinitionValue {
	return DefinitionValue{
		state: attr.ValueStateUnknown,
	}
}

func NewDefinitionValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (DefinitionValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing DefinitionValue Attribute Value",
				"While creating a DefinitionValue value, a missing attribute value was detected. "+
					"A DefinitionValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DefinitionValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid DefinitionValue Attribute Type",
				"While creating a DefinitionValue value, an invalid attribute value was detected. "+
					"A DefinitionValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("DefinitionValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("DefinitionValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra DefinitionValue Attribute Value",
				"While creating a DefinitionValue value, an extra attribute value was detected. "+
					"A DefinitionValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra DefinitionValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewDefinitionValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewDefinitionValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	portalVersionIdAttribute, ok := attributes["portal_version_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`portal_version_id is missing from object`)

		return NewDefinitionValueUnknown(), diags
	}

	portalVersionIdVal, ok := portalVersionIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`portal_version_id expected to be basetypes.StringValue, was: %T`, portalVersionIdAttribute))
	}

	if diags.HasError() {
		return NewDefinitionValueUnknown(), diags
	}

	return DefinitionValue{
		Name:            nameVal,
		PortalVersionId: portalVersionIdVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewDefinitionValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) DefinitionValue {
	object, diags := NewDefinitionValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewDefinitionValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t DefinitionType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewDefinitionValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewDefinitionValueUnknown(), nil
	}

	if in.IsNull() {
		return NewDefinitionValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewDefinitionValueMust(DefinitionValue{}.AttributeTypes(ctx), attributes), nil
}

func (t DefinitionType) ValueType(ctx context.Context) attr.Value {
	return DefinitionValue{}
}

var _ basetypes.ObjectValuable = DefinitionValue{}

type DefinitionValue struct {
	Name            basetypes.StringValue `tfsdk:"name"`
	PortalVersionId basetypes.StringValue `tfsdk:"portal_version_id"`
	state           attr.ValueState
}

func (v DefinitionValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["portal_version_id"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.PortalVersionId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["portal_version_id"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v DefinitionValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v DefinitionValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v DefinitionValue) String() string {
	return "DefinitionValue"
}

func (v DefinitionValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"name":              basetypes.StringType{},
		"portal_version_id": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"name":              v.Name,
			"portal_version_id": v.PortalVersionId,
		})

	return objVal, diags
}

func (v DefinitionValue) Equal(o attr.Value) bool {
	other, ok := o.(DefinitionValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.PortalVersionId.Equal(other.PortalVersionId) {
		return false
	}

	return true
}

func (v DefinitionValue) Type(ctx context.Context) attr.Type {
	return DefinitionType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v DefinitionValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":              basetypes.StringType{},
		"portal_version_id": basetypes.StringType{},
	}
}
