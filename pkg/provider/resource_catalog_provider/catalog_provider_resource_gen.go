// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_catalog_provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func CatalogProviderResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time of the resources creation.",
				MarkdownDescription: "The date and time of the resources creation.",
			},
			"github": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"catalog_path": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The path to the catalog file.",
						MarkdownDescription: "The path to the catalog file.",
					},
					"filters": schema.SingleNestedAttribute{
						Attributes: map[string]schema.Attribute{
							"allow_forks": schema.BoolAttribute{
								Optional:            true,
								Computed:            true,
								Description:         "Whether to include forks in the catalog.",
								MarkdownDescription: "Whether to include forks in the catalog.",
							},
							"branch": schema.StringAttribute{
								Optional:            true,
								Computed:            true,
								Description:         "The branch to use for the catalog.",
								MarkdownDescription: "The branch to use for the catalog.",
							},
							"repository": schema.StringAttribute{
								Optional:            true,
								Computed:            true,
								Description:         "The repository to use for the catalog.",
								MarkdownDescription: "The repository to use for the catalog.",
							},
							"topic": schema.SingleNestedAttribute{
								Attributes: map[string]schema.Attribute{
									"exclude": schema.ListAttribute{
										ElementType:         types.StringType,
										Optional:            true,
										Computed:            true,
										Description:         "A list of Github topics to exclude from the catalog.",
										MarkdownDescription: "A list of Github topics to exclude from the catalog.",
									},
									"include": schema.ListAttribute{
										ElementType:         types.StringType,
										Optional:            true,
										Computed:            true,
										Description:         "A list of Github topics to include in the catalog.",
										MarkdownDescription: "A list of Github topics to include in the catalog.",
									},
								},
								CustomType: TopicType{
									ObjectType: types.ObjectType{
										AttrTypes: TopicValue{}.AttributeTypes(ctx),
									},
								},
								Optional: true,
								Computed: true,
							},
							"visibility": schema.ListAttribute{
								ElementType:         types.StringType,
								Optional:            true,
								Computed:            true,
								Description:         "The visibility of the repositories to include in the catalog.",
								MarkdownDescription: "The visibility of the repositories to include in the catalog.",
							},
						},
						CustomType: FiltersType{
							ObjectType: types.ObjectType{
								AttrTypes: FiltersValue{}.AttributeTypes(ctx),
							},
						},
						Optional: true,
						Computed: true,
					},
					"host": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The host for the Github catalog provider.",
						MarkdownDescription: "The host for the Github catalog provider.",
					},
					"organization": schema.StringAttribute{
						Required:            true,
						Description:         "The organization to use for the catalog.",
						MarkdownDescription: "The organization to use for the catalog.",
					},
				},
				CustomType: GithubType{
					ObjectType: types.ObjectType{
						AttrTypes: GithubValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"gitlab": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"branch": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The branch to use for the catalog.",
						MarkdownDescription: "The branch to use for the catalog.",
					},
					"entity_filename": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The filename to use for the entity.",
						MarkdownDescription: "The filename to use for the entity.",
					},
					"group": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The group to use for the catalog.",
						MarkdownDescription: "The group to use for the catalog.",
					},
					"group_pattern": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The group pattern to use for the catalog.",
						MarkdownDescription: "The group pattern to use for the catalog.",
					},
					"host": schema.StringAttribute{
						Required:            true,
						Description:         "The host for the Gitlab catalog provider.",
						MarkdownDescription: "The host for the Gitlab catalog provider.",
					},
					"project_pattern": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The project pattern to use for the catalog.",
						MarkdownDescription: "The project pattern to use for the catalog.",
					},
					"skip_forked_repos": schema.BoolAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Whether to skip forked repositories in the catalog.",
						MarkdownDescription: "Whether to skip forked repositories in the catalog.",
					},
					"user_pattern": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The user pattern to use for the catalog.",
						MarkdownDescription: "The user pattern to use for the catalog.",
					},
				},
				CustomType: GitlabType{
					ObjectType: types.ObjectType{
						AttrTypes: GitlabValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Flightdeck resource.",
				MarkdownDescription: "The ID of the Flightdeck resource.",
			},
			"location": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"allow": schema.ListAttribute{
						ElementType:         types.StringType,
						Optional:            true,
						Computed:            true,
						Description:         "The types of entities to allow in the catalog.",
						MarkdownDescription: "The types of entities to allow in the catalog.",
					},
					"target": schema.StringAttribute{
						Required:            true,
						Description:         "The target URL for the location catalog provider.",
						MarkdownDescription: "The target URL for the location catalog provider.",
					},
				},
				CustomType: LocationType{
					ObjectType: types.ObjectType{
						AttrTypes: LocationValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Catalog Provider resource.",
				MarkdownDescription: "The name of the Catalog Provider resource.",
			},
			"organization_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Flightdeck Organization resource.",
				MarkdownDescription: "The ID of the Flightdeck Organization resource.",
			},
			"portal_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Flightdeck Portal resource.",
				MarkdownDescription: "The name of the Flightdeck Portal resource.",
			},
		},
		Description: "Represents a Flightdeck Catalog Provider.",
	}
}

type CatalogProviderModel struct {
	CreatedAt      types.String  `tfsdk:"created_at"`
	Github         GithubValue   `tfsdk:"github"`
	Gitlab         GitlabValue   `tfsdk:"gitlab"`
	Id             types.String  `tfsdk:"id"`
	Location       LocationValue `tfsdk:"location"`
	Name           types.String  `tfsdk:"name"`
	OrganizationId types.String  `tfsdk:"organization_id"`
	PortalName     types.String  `tfsdk:"portal_name"`
}

var _ basetypes.ObjectTypable = GithubType{}

type GithubType struct {
	basetypes.ObjectType
}

func (t GithubType) Equal(o attr.Type) bool {
	other, ok := o.(GithubType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GithubType) String() string {
	return "GithubType"
}

func (t GithubType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	catalogPathAttribute, ok := attributes["catalog_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`catalog_path is missing from object`)

		return nil, diags
	}

	catalogPathVal, ok := catalogPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`catalog_path expected to be basetypes.StringValue, was: %T`, catalogPathAttribute))
	}

	filtersAttribute, ok := attributes["filters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filters is missing from object`)

		return nil, diags
	}

	filtersVal, ok := filtersAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filters expected to be basetypes.ObjectValue, was: %T`, filtersAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return nil, diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	organizationAttribute, ok := attributes["organization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`organization is missing from object`)

		return nil, diags
	}

	organizationVal, ok := organizationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`organization expected to be basetypes.StringValue, was: %T`, organizationAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GithubValue{
		CatalogPath:  catalogPathVal,
		Filters:      filtersVal,
		Host:         hostVal,
		Organization: organizationVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewGithubValueNull() GithubValue {
	return GithubValue{
		state: attr.ValueStateNull,
	}
}

func NewGithubValueUnknown() GithubValue {
	return GithubValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGithubValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GithubValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GithubValue Attribute Value",
				"While creating a GithubValue value, a missing attribute value was detected. "+
					"A GithubValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GithubValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GithubValue Attribute Type",
				"While creating a GithubValue value, an invalid attribute value was detected. "+
					"A GithubValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GithubValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GithubValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GithubValue Attribute Value",
				"While creating a GithubValue value, an extra attribute value was detected. "+
					"A GithubValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GithubValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGithubValueUnknown(), diags
	}

	catalogPathAttribute, ok := attributes["catalog_path"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`catalog_path is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	catalogPathVal, ok := catalogPathAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`catalog_path expected to be basetypes.StringValue, was: %T`, catalogPathAttribute))
	}

	filtersAttribute, ok := attributes["filters"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`filters is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	filtersVal, ok := filtersAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`filters expected to be basetypes.ObjectValue, was: %T`, filtersAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	organizationAttribute, ok := attributes["organization"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`organization is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	organizationVal, ok := organizationAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`organization expected to be basetypes.StringValue, was: %T`, organizationAttribute))
	}

	if diags.HasError() {
		return NewGithubValueUnknown(), diags
	}

	return GithubValue{
		CatalogPath:  catalogPathVal,
		Filters:      filtersVal,
		Host:         hostVal,
		Organization: organizationVal,
		state:        attr.ValueStateKnown,
	}, diags
}

func NewGithubValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GithubValue {
	object, diags := NewGithubValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGithubValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GithubType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGithubValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGithubValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGithubValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGithubValueMust(GithubValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GithubType) ValueType(ctx context.Context) attr.Value {
	return GithubValue{}
}

var _ basetypes.ObjectValuable = GithubValue{}

type GithubValue struct {
	CatalogPath  basetypes.StringValue `tfsdk:"catalog_path"`
	Filters      basetypes.ObjectValue `tfsdk:"filters"`
	Host         basetypes.StringValue `tfsdk:"host"`
	Organization basetypes.StringValue `tfsdk:"organization"`
	state        attr.ValueState
}

func (v GithubValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["catalog_path"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["filters"] = basetypes.ObjectType{
		AttrTypes: FiltersValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["host"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["organization"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.CatalogPath.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["catalog_path"] = val

		val, err = v.Filters.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["filters"] = val

		val, err = v.Host.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["host"] = val

		val, err = v.Organization.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["organization"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GithubValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GithubValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GithubValue) String() string {
	return "GithubValue"
}

func (v GithubValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var filters basetypes.ObjectValue

	if v.Filters.IsNull() {
		filters = types.ObjectNull(
			FiltersValue{}.AttributeTypes(ctx),
		)
	}

	if v.Filters.IsUnknown() {
		filters = types.ObjectUnknown(
			FiltersValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Filters.IsNull() && !v.Filters.IsUnknown() {
		filters = types.ObjectValueMust(
			FiltersValue{}.AttributeTypes(ctx),
			v.Filters.Attributes(),
		)
	}

	attributeTypes := map[string]attr.Type{
		"catalog_path": basetypes.StringType{},
		"filters": basetypes.ObjectType{
			AttrTypes: FiltersValue{}.AttributeTypes(ctx),
		},
		"host":         basetypes.StringType{},
		"organization": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"catalog_path": v.CatalogPath,
			"filters":      filters,
			"host":         v.Host,
			"organization": v.Organization,
		})

	return objVal, diags
}

func (v GithubValue) Equal(o attr.Value) bool {
	other, ok := o.(GithubValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.CatalogPath.Equal(other.CatalogPath) {
		return false
	}

	if !v.Filters.Equal(other.Filters) {
		return false
	}

	if !v.Host.Equal(other.Host) {
		return false
	}

	if !v.Organization.Equal(other.Organization) {
		return false
	}

	return true
}

func (v GithubValue) Type(ctx context.Context) attr.Type {
	return GithubType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GithubValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"catalog_path": basetypes.StringType{},
		"filters": basetypes.ObjectType{
			AttrTypes: FiltersValue{}.AttributeTypes(ctx),
		},
		"host":         basetypes.StringType{},
		"organization": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = FiltersType{}

type FiltersType struct {
	basetypes.ObjectType
}

func (t FiltersType) Equal(o attr.Type) bool {
	other, ok := o.(FiltersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t FiltersType) String() string {
	return "FiltersType"
}

func (t FiltersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowForksAttribute, ok := attributes["allow_forks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_forks is missing from object`)

		return nil, diags
	}

	allowForksVal, ok := allowForksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_forks expected to be basetypes.BoolValue, was: %T`, allowForksAttribute))
	}

	branchAttribute, ok := attributes["branch"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`branch is missing from object`)

		return nil, diags
	}

	branchVal, ok := branchAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`branch expected to be basetypes.StringValue, was: %T`, branchAttribute))
	}

	repositoryAttribute, ok := attributes["repository"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`repository is missing from object`)

		return nil, diags
	}

	repositoryVal, ok := repositoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`repository expected to be basetypes.StringValue, was: %T`, repositoryAttribute))
	}

	topicAttribute, ok := attributes["topic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topic is missing from object`)

		return nil, diags
	}

	topicVal, ok := topicAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topic expected to be basetypes.ObjectValue, was: %T`, topicAttribute))
	}

	visibilityAttribute, ok := attributes["visibility"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`visibility is missing from object`)

		return nil, diags
	}

	visibilityVal, ok := visibilityAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`visibility expected to be basetypes.ListValue, was: %T`, visibilityAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return FiltersValue{
		AllowForks: allowForksVal,
		Branch:     branchVal,
		Repository: repositoryVal,
		Topic:      topicVal,
		Visibility: visibilityVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewFiltersValueNull() FiltersValue {
	return FiltersValue{
		state: attr.ValueStateNull,
	}
}

func NewFiltersValueUnknown() FiltersValue {
	return FiltersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewFiltersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (FiltersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing FiltersValue Attribute Value",
				"While creating a FiltersValue value, a missing attribute value was detected. "+
					"A FiltersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid FiltersValue Attribute Type",
				"While creating a FiltersValue value, an invalid attribute value was detected. "+
					"A FiltersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("FiltersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra FiltersValue Attribute Value",
				"While creating a FiltersValue value, an extra attribute value was detected. "+
					"A FiltersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra FiltersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewFiltersValueUnknown(), diags
	}

	allowForksAttribute, ok := attributes["allow_forks"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow_forks is missing from object`)

		return NewFiltersValueUnknown(), diags
	}

	allowForksVal, ok := allowForksAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow_forks expected to be basetypes.BoolValue, was: %T`, allowForksAttribute))
	}

	branchAttribute, ok := attributes["branch"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`branch is missing from object`)

		return NewFiltersValueUnknown(), diags
	}

	branchVal, ok := branchAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`branch expected to be basetypes.StringValue, was: %T`, branchAttribute))
	}

	repositoryAttribute, ok := attributes["repository"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`repository is missing from object`)

		return NewFiltersValueUnknown(), diags
	}

	repositoryVal, ok := repositoryAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`repository expected to be basetypes.StringValue, was: %T`, repositoryAttribute))
	}

	topicAttribute, ok := attributes["topic"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`topic is missing from object`)

		return NewFiltersValueUnknown(), diags
	}

	topicVal, ok := topicAttribute.(basetypes.ObjectValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`topic expected to be basetypes.ObjectValue, was: %T`, topicAttribute))
	}

	visibilityAttribute, ok := attributes["visibility"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`visibility is missing from object`)

		return NewFiltersValueUnknown(), diags
	}

	visibilityVal, ok := visibilityAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`visibility expected to be basetypes.ListValue, was: %T`, visibilityAttribute))
	}

	if diags.HasError() {
		return NewFiltersValueUnknown(), diags
	}

	return FiltersValue{
		AllowForks: allowForksVal,
		Branch:     branchVal,
		Repository: repositoryVal,
		Topic:      topicVal,
		Visibility: visibilityVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewFiltersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) FiltersValue {
	object, diags := NewFiltersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewFiltersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t FiltersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewFiltersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewFiltersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewFiltersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewFiltersValueMust(FiltersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t FiltersType) ValueType(ctx context.Context) attr.Value {
	return FiltersValue{}
}

var _ basetypes.ObjectValuable = FiltersValue{}

type FiltersValue struct {
	AllowForks basetypes.BoolValue   `tfsdk:"allow_forks"`
	Branch     basetypes.StringValue `tfsdk:"branch"`
	Repository basetypes.StringValue `tfsdk:"repository"`
	Topic      basetypes.ObjectValue `tfsdk:"topic"`
	Visibility basetypes.ListValue   `tfsdk:"visibility"`
	state      attr.ValueState
}

func (v FiltersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["allow_forks"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["branch"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["repository"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["topic"] = basetypes.ObjectType{
		AttrTypes: TopicValue{}.AttributeTypes(ctx),
	}.TerraformType(ctx)
	attrTypes["visibility"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.AllowForks.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allow_forks"] = val

		val, err = v.Branch.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["branch"] = val

		val, err = v.Repository.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["repository"] = val

		val, err = v.Topic.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["topic"] = val

		val, err = v.Visibility.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["visibility"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v FiltersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v FiltersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v FiltersValue) String() string {
	return "FiltersValue"
}

func (v FiltersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var topic basetypes.ObjectValue

	if v.Topic.IsNull() {
		topic = types.ObjectNull(
			TopicValue{}.AttributeTypes(ctx),
		)
	}

	if v.Topic.IsUnknown() {
		topic = types.ObjectUnknown(
			TopicValue{}.AttributeTypes(ctx),
		)
	}

	if !v.Topic.IsNull() && !v.Topic.IsUnknown() {
		topic = types.ObjectValueMust(
			TopicValue{}.AttributeTypes(ctx),
			v.Topic.Attributes(),
		)
	}

	var visibilityVal basetypes.ListValue
	switch {
	case v.Visibility.IsUnknown():
		visibilityVal = types.ListUnknown(types.StringType)
	case v.Visibility.IsNull():
		visibilityVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		visibilityVal, d = types.ListValue(types.StringType, v.Visibility.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"allow_forks": basetypes.BoolType{},
			"branch":      basetypes.StringType{},
			"repository":  basetypes.StringType{},
			"topic": basetypes.ObjectType{
				AttrTypes: TopicValue{}.AttributeTypes(ctx),
			},
			"visibility": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"allow_forks": basetypes.BoolType{},
		"branch":      basetypes.StringType{},
		"repository":  basetypes.StringType{},
		"topic": basetypes.ObjectType{
			AttrTypes: TopicValue{}.AttributeTypes(ctx),
		},
		"visibility": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allow_forks": v.AllowForks,
			"branch":      v.Branch,
			"repository":  v.Repository,
			"topic":       topic,
			"visibility":  visibilityVal,
		})

	return objVal, diags
}

func (v FiltersValue) Equal(o attr.Value) bool {
	other, ok := o.(FiltersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllowForks.Equal(other.AllowForks) {
		return false
	}

	if !v.Branch.Equal(other.Branch) {
		return false
	}

	if !v.Repository.Equal(other.Repository) {
		return false
	}

	if !v.Topic.Equal(other.Topic) {
		return false
	}

	if !v.Visibility.Equal(other.Visibility) {
		return false
	}

	return true
}

func (v FiltersValue) Type(ctx context.Context) attr.Type {
	return FiltersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v FiltersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allow_forks": basetypes.BoolType{},
		"branch":      basetypes.StringType{},
		"repository":  basetypes.StringType{},
		"topic": basetypes.ObjectType{
			AttrTypes: TopicValue{}.AttributeTypes(ctx),
		},
		"visibility": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = TopicType{}

type TopicType struct {
	basetypes.ObjectType
}

func (t TopicType) Equal(o attr.Type) bool {
	other, ok := o.(TopicType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t TopicType) String() string {
	return "TopicType"
}

func (t TopicType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	excludeAttribute, ok := attributes["exclude"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exclude is missing from object`)

		return nil, diags
	}

	excludeVal, ok := excludeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exclude expected to be basetypes.ListValue, was: %T`, excludeAttribute))
	}

	includeAttribute, ok := attributes["include"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include is missing from object`)

		return nil, diags
	}

	includeVal, ok := includeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include expected to be basetypes.ListValue, was: %T`, includeAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return TopicValue{
		Exclude: excludeVal,
		Include: includeVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewTopicValueNull() TopicValue {
	return TopicValue{
		state: attr.ValueStateNull,
	}
}

func NewTopicValueUnknown() TopicValue {
	return TopicValue{
		state: attr.ValueStateUnknown,
	}
}

func NewTopicValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (TopicValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing TopicValue Attribute Value",
				"While creating a TopicValue value, a missing attribute value was detected. "+
					"A TopicValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TopicValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid TopicValue Attribute Type",
				"While creating a TopicValue value, an invalid attribute value was detected. "+
					"A TopicValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("TopicValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("TopicValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra TopicValue Attribute Value",
				"While creating a TopicValue value, an extra attribute value was detected. "+
					"A TopicValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra TopicValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewTopicValueUnknown(), diags
	}

	excludeAttribute, ok := attributes["exclude"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`exclude is missing from object`)

		return NewTopicValueUnknown(), diags
	}

	excludeVal, ok := excludeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`exclude expected to be basetypes.ListValue, was: %T`, excludeAttribute))
	}

	includeAttribute, ok := attributes["include"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`include is missing from object`)

		return NewTopicValueUnknown(), diags
	}

	includeVal, ok := includeAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`include expected to be basetypes.ListValue, was: %T`, includeAttribute))
	}

	if diags.HasError() {
		return NewTopicValueUnknown(), diags
	}

	return TopicValue{
		Exclude: excludeVal,
		Include: includeVal,
		state:   attr.ValueStateKnown,
	}, diags
}

func NewTopicValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) TopicValue {
	object, diags := NewTopicValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewTopicValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t TopicType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewTopicValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewTopicValueUnknown(), nil
	}

	if in.IsNull() {
		return NewTopicValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewTopicValueMust(TopicValue{}.AttributeTypes(ctx), attributes), nil
}

func (t TopicType) ValueType(ctx context.Context) attr.Value {
	return TopicValue{}
}

var _ basetypes.ObjectValuable = TopicValue{}

type TopicValue struct {
	Exclude basetypes.ListValue `tfsdk:"exclude"`
	Include basetypes.ListValue `tfsdk:"include"`
	state   attr.ValueState
}

func (v TopicValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["exclude"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["include"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Exclude.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["exclude"] = val

		val, err = v.Include.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["include"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v TopicValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v TopicValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v TopicValue) String() string {
	return "TopicValue"
}

func (v TopicValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var excludeVal basetypes.ListValue
	switch {
	case v.Exclude.IsUnknown():
		excludeVal = types.ListUnknown(types.StringType)
	case v.Exclude.IsNull():
		excludeVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		excludeVal, d = types.ListValue(types.StringType, v.Exclude.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"exclude": basetypes.ListType{
				ElemType: types.StringType,
			},
			"include": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	var includeVal basetypes.ListValue
	switch {
	case v.Include.IsUnknown():
		includeVal = types.ListUnknown(types.StringType)
	case v.Include.IsNull():
		includeVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		includeVal, d = types.ListValue(types.StringType, v.Include.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"exclude": basetypes.ListType{
				ElemType: types.StringType,
			},
			"include": basetypes.ListType{
				ElemType: types.StringType,
			},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"exclude": basetypes.ListType{
			ElemType: types.StringType,
		},
		"include": basetypes.ListType{
			ElemType: types.StringType,
		},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"exclude": excludeVal,
			"include": includeVal,
		})

	return objVal, diags
}

func (v TopicValue) Equal(o attr.Value) bool {
	other, ok := o.(TopicValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Exclude.Equal(other.Exclude) {
		return false
	}

	if !v.Include.Equal(other.Include) {
		return false
	}

	return true
}

func (v TopicValue) Type(ctx context.Context) attr.Type {
	return TopicType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v TopicValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"exclude": basetypes.ListType{
			ElemType: types.StringType,
		},
		"include": basetypes.ListType{
			ElemType: types.StringType,
		},
	}
}

var _ basetypes.ObjectTypable = GitlabType{}

type GitlabType struct {
	basetypes.ObjectType
}

func (t GitlabType) Equal(o attr.Type) bool {
	other, ok := o.(GitlabType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GitlabType) String() string {
	return "GitlabType"
}

func (t GitlabType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	branchAttribute, ok := attributes["branch"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`branch is missing from object`)

		return nil, diags
	}

	branchVal, ok := branchAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`branch expected to be basetypes.StringValue, was: %T`, branchAttribute))
	}

	entityFilenameAttribute, ok := attributes["entity_filename"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`entity_filename is missing from object`)

		return nil, diags
	}

	entityFilenameVal, ok := entityFilenameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`entity_filename expected to be basetypes.StringValue, was: %T`, entityFilenameAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return nil, diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	groupPatternAttribute, ok := attributes["group_pattern"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_pattern is missing from object`)

		return nil, diags
	}

	groupPatternVal, ok := groupPatternAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_pattern expected to be basetypes.StringValue, was: %T`, groupPatternAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return nil, diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	projectPatternAttribute, ok := attributes["project_pattern"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_pattern is missing from object`)

		return nil, diags
	}

	projectPatternVal, ok := projectPatternAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_pattern expected to be basetypes.StringValue, was: %T`, projectPatternAttribute))
	}

	skipForkedReposAttribute, ok := attributes["skip_forked_repos"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_forked_repos is missing from object`)

		return nil, diags
	}

	skipForkedReposVal, ok := skipForkedReposAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_forked_repos expected to be basetypes.BoolValue, was: %T`, skipForkedReposAttribute))
	}

	userPatternAttribute, ok := attributes["user_pattern"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_pattern is missing from object`)

		return nil, diags
	}

	userPatternVal, ok := userPatternAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_pattern expected to be basetypes.StringValue, was: %T`, userPatternAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GitlabValue{
		Branch:          branchVal,
		EntityFilename:  entityFilenameVal,
		Group:           groupVal,
		GroupPattern:    groupPatternVal,
		Host:            hostVal,
		ProjectPattern:  projectPatternVal,
		SkipForkedRepos: skipForkedReposVal,
		UserPattern:     userPatternVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewGitlabValueNull() GitlabValue {
	return GitlabValue{
		state: attr.ValueStateNull,
	}
}

func NewGitlabValueUnknown() GitlabValue {
	return GitlabValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGitlabValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GitlabValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GitlabValue Attribute Value",
				"While creating a GitlabValue value, a missing attribute value was detected. "+
					"A GitlabValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GitlabValue Attribute Type",
				"While creating a GitlabValue value, an invalid attribute value was detected. "+
					"A GitlabValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GitlabValue Attribute Value",
				"While creating a GitlabValue value, an extra attribute value was detected. "+
					"A GitlabValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GitlabValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGitlabValueUnknown(), diags
	}

	branchAttribute, ok := attributes["branch"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`branch is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	branchVal, ok := branchAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`branch expected to be basetypes.StringValue, was: %T`, branchAttribute))
	}

	entityFilenameAttribute, ok := attributes["entity_filename"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`entity_filename is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	entityFilenameVal, ok := entityFilenameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`entity_filename expected to be basetypes.StringValue, was: %T`, entityFilenameAttribute))
	}

	groupAttribute, ok := attributes["group"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	groupVal, ok := groupAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group expected to be basetypes.StringValue, was: %T`, groupAttribute))
	}

	groupPatternAttribute, ok := attributes["group_pattern"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`group_pattern is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	groupPatternVal, ok := groupPatternAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`group_pattern expected to be basetypes.StringValue, was: %T`, groupPatternAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	projectPatternAttribute, ok := attributes["project_pattern"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`project_pattern is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	projectPatternVal, ok := projectPatternAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`project_pattern expected to be basetypes.StringValue, was: %T`, projectPatternAttribute))
	}

	skipForkedReposAttribute, ok := attributes["skip_forked_repos"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`skip_forked_repos is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	skipForkedReposVal, ok := skipForkedReposAttribute.(basetypes.BoolValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`skip_forked_repos expected to be basetypes.BoolValue, was: %T`, skipForkedReposAttribute))
	}

	userPatternAttribute, ok := attributes["user_pattern"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`user_pattern is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	userPatternVal, ok := userPatternAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`user_pattern expected to be basetypes.StringValue, was: %T`, userPatternAttribute))
	}

	if diags.HasError() {
		return NewGitlabValueUnknown(), diags
	}

	return GitlabValue{
		Branch:          branchVal,
		EntityFilename:  entityFilenameVal,
		Group:           groupVal,
		GroupPattern:    groupPatternVal,
		Host:            hostVal,
		ProjectPattern:  projectPatternVal,
		SkipForkedRepos: skipForkedReposVal,
		UserPattern:     userPatternVal,
		state:           attr.ValueStateKnown,
	}, diags
}

func NewGitlabValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GitlabValue {
	object, diags := NewGitlabValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGitlabValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GitlabType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGitlabValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGitlabValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGitlabValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGitlabValueMust(GitlabValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GitlabType) ValueType(ctx context.Context) attr.Value {
	return GitlabValue{}
}

var _ basetypes.ObjectValuable = GitlabValue{}

type GitlabValue struct {
	Branch          basetypes.StringValue `tfsdk:"branch"`
	EntityFilename  basetypes.StringValue `tfsdk:"entity_filename"`
	Group           basetypes.StringValue `tfsdk:"group"`
	GroupPattern    basetypes.StringValue `tfsdk:"group_pattern"`
	Host            basetypes.StringValue `tfsdk:"host"`
	ProjectPattern  basetypes.StringValue `tfsdk:"project_pattern"`
	SkipForkedRepos basetypes.BoolValue   `tfsdk:"skip_forked_repos"`
	UserPattern     basetypes.StringValue `tfsdk:"user_pattern"`
	state           attr.ValueState
}

func (v GitlabValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 8)

	var val tftypes.Value
	var err error

	attrTypes["branch"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["entity_filename"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["group"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["group_pattern"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["host"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["project_pattern"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["skip_forked_repos"] = basetypes.BoolType{}.TerraformType(ctx)
	attrTypes["user_pattern"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 8)

		val, err = v.Branch.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["branch"] = val

		val, err = v.EntityFilename.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["entity_filename"] = val

		val, err = v.Group.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group"] = val

		val, err = v.GroupPattern.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["group_pattern"] = val

		val, err = v.Host.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["host"] = val

		val, err = v.ProjectPattern.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["project_pattern"] = val

		val, err = v.SkipForkedRepos.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["skip_forked_repos"] = val

		val, err = v.UserPattern.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["user_pattern"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GitlabValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GitlabValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GitlabValue) String() string {
	return "GitlabValue"
}

func (v GitlabValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"branch":            basetypes.StringType{},
		"entity_filename":   basetypes.StringType{},
		"group":             basetypes.StringType{},
		"group_pattern":     basetypes.StringType{},
		"host":              basetypes.StringType{},
		"project_pattern":   basetypes.StringType{},
		"skip_forked_repos": basetypes.BoolType{},
		"user_pattern":      basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"branch":            v.Branch,
			"entity_filename":   v.EntityFilename,
			"group":             v.Group,
			"group_pattern":     v.GroupPattern,
			"host":              v.Host,
			"project_pattern":   v.ProjectPattern,
			"skip_forked_repos": v.SkipForkedRepos,
			"user_pattern":      v.UserPattern,
		})

	return objVal, diags
}

func (v GitlabValue) Equal(o attr.Value) bool {
	other, ok := o.(GitlabValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Branch.Equal(other.Branch) {
		return false
	}

	if !v.EntityFilename.Equal(other.EntityFilename) {
		return false
	}

	if !v.Group.Equal(other.Group) {
		return false
	}

	if !v.GroupPattern.Equal(other.GroupPattern) {
		return false
	}

	if !v.Host.Equal(other.Host) {
		return false
	}

	if !v.ProjectPattern.Equal(other.ProjectPattern) {
		return false
	}

	if !v.SkipForkedRepos.Equal(other.SkipForkedRepos) {
		return false
	}

	if !v.UserPattern.Equal(other.UserPattern) {
		return false
	}

	return true
}

func (v GitlabValue) Type(ctx context.Context) attr.Type {
	return GitlabType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GitlabValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"branch":            basetypes.StringType{},
		"entity_filename":   basetypes.StringType{},
		"group":             basetypes.StringType{},
		"group_pattern":     basetypes.StringType{},
		"host":              basetypes.StringType{},
		"project_pattern":   basetypes.StringType{},
		"skip_forked_repos": basetypes.BoolType{},
		"user_pattern":      basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = LocationType{}

type LocationType struct {
	basetypes.ObjectType
}

func (t LocationType) Equal(o attr.Type) bool {
	other, ok := o.(LocationType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t LocationType) String() string {
	return "LocationType"
}

func (t LocationType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowAttribute, ok := attributes["allow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow is missing from object`)

		return nil, diags
	}

	allowVal, ok := allowAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow expected to be basetypes.ListValue, was: %T`, allowAttribute))
	}

	targetAttribute, ok := attributes["target"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target is missing from object`)

		return nil, diags
	}

	targetVal, ok := targetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target expected to be basetypes.StringValue, was: %T`, targetAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return LocationValue{
		Allow:  allowVal,
		Target: targetVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewLocationValueNull() LocationValue {
	return LocationValue{
		state: attr.ValueStateNull,
	}
}

func NewLocationValueUnknown() LocationValue {
	return LocationValue{
		state: attr.ValueStateUnknown,
	}
}

func NewLocationValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (LocationValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing LocationValue Attribute Value",
				"While creating a LocationValue value, a missing attribute value was detected. "+
					"A LocationValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LocationValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid LocationValue Attribute Type",
				"While creating a LocationValue value, an invalid attribute value was detected. "+
					"A LocationValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("LocationValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("LocationValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra LocationValue Attribute Value",
				"While creating a LocationValue value, an extra attribute value was detected. "+
					"A LocationValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra LocationValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewLocationValueUnknown(), diags
	}

	allowAttribute, ok := attributes["allow"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allow is missing from object`)

		return NewLocationValueUnknown(), diags
	}

	allowVal, ok := allowAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allow expected to be basetypes.ListValue, was: %T`, allowAttribute))
	}

	targetAttribute, ok := attributes["target"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`target is missing from object`)

		return NewLocationValueUnknown(), diags
	}

	targetVal, ok := targetAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`target expected to be basetypes.StringValue, was: %T`, targetAttribute))
	}

	if diags.HasError() {
		return NewLocationValueUnknown(), diags
	}

	return LocationValue{
		Allow:  allowVal,
		Target: targetVal,
		state:  attr.ValueStateKnown,
	}, diags
}

func NewLocationValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) LocationValue {
	object, diags := NewLocationValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewLocationValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t LocationType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewLocationValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewLocationValueUnknown(), nil
	}

	if in.IsNull() {
		return NewLocationValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewLocationValueMust(LocationValue{}.AttributeTypes(ctx), attributes), nil
}

func (t LocationType) ValueType(ctx context.Context) attr.Value {
	return LocationValue{}
}

var _ basetypes.ObjectValuable = LocationValue{}

type LocationValue struct {
	Allow  basetypes.ListValue   `tfsdk:"allow"`
	Target basetypes.StringValue `tfsdk:"target"`
	state  attr.ValueState
}

func (v LocationValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["allow"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["target"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Allow.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allow"] = val

		val, err = v.Target.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["target"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v LocationValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v LocationValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v LocationValue) String() string {
	return "LocationValue"
}

func (v LocationValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var allowVal basetypes.ListValue
	switch {
	case v.Allow.IsUnknown():
		allowVal = types.ListUnknown(types.StringType)
	case v.Allow.IsNull():
		allowVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		allowVal, d = types.ListValue(types.StringType, v.Allow.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"allow": basetypes.ListType{
				ElemType: types.StringType,
			},
			"target": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"allow": basetypes.ListType{
			ElemType: types.StringType,
		},
		"target": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allow":  allowVal,
			"target": v.Target,
		})

	return objVal, diags
}

func (v LocationValue) Equal(o attr.Value) bool {
	other, ok := o.(LocationValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Allow.Equal(other.Allow) {
		return false
	}

	if !v.Target.Equal(other.Target) {
		return false
	}

	return true
}

func (v LocationValue) Type(ctx context.Context) attr.Type {
	return LocationType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v LocationValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allow": basetypes.ListType{
			ElemType: types.StringType,
		},
		"target": basetypes.StringType{},
	}
}
