// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_portal_proxy

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func PortalProxyResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"allowed_headers": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The list of allowed HTTP headers.",
				MarkdownDescription: "The list of allowed HTTP headers.",
			},
			"allowed_methods": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "The list of allowed HTTP methods.",
				MarkdownDescription: "The list of allowed HTTP methods.",
			},
			"change_origin": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Indicates whether to change the origin of the Portal Proxy.",
				MarkdownDescription: "Indicates whether to change the origin of the Portal Proxy.",
			},
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time of the resources creation.",
				MarkdownDescription: "The date and time of the resources creation.",
			},
			"credentials": schema.StringAttribute{
				Required:            true,
				Description:         "The credential configuration of the Portal Proxy.",
				MarkdownDescription: "The credential configuration of the Portal Proxy.",
			},
			"endpoint": schema.StringAttribute{
				Required:            true,
				Description:         "The endpoint of the Portal Proxy.",
				MarkdownDescription: "The endpoint of the Portal Proxy.",
			},
			"http_headers": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							Required:            true,
							Description:         "The name of the HTTP header.",
							MarkdownDescription: "The name of the HTTP header.",
						},
						"value": schema.StringAttribute{
							Required:            true,
							Description:         "The value of the HTTP header.",
							MarkdownDescription: "The value of the HTTP header.",
						},
					},
					CustomType: HttpHeadersType{
						ObjectType: types.ObjectType{
							AttrTypes: HttpHeadersValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The list of Portal Proxy Header resources to be applied.",
				MarkdownDescription: "The list of Portal Proxy Header resources to be applied.",
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Flightdeck resource.",
				MarkdownDescription: "The ID of the Flightdeck resource.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Portal Proxy.",
				MarkdownDescription: "The name of the Portal Proxy.",
			},
			"organization_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Flightdeck Organization resource.",
				MarkdownDescription: "The ID of the Flightdeck Organization resource.",
			},
			"path_rewrite": schema.ListNestedAttribute{
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"dst": schema.StringAttribute{
							Required:            true,
							Description:         "The destination of the path to rewrite.",
							MarkdownDescription: "The destination of the path to rewrite.",
						},
						"src": schema.StringAttribute{
							Required:            true,
							Description:         "The source path to rewrite.",
							MarkdownDescription: "The source path to rewrite.",
						},
					},
					CustomType: PathRewriteType{
						ObjectType: types.ObjectType{
							AttrTypes: PathRewriteValue{}.AttributeTypes(ctx),
						},
					},
				},
				Optional:            true,
				Computed:            true,
				Description:         "The list of Portal Proxy Path Rewrite resources to be applied.",
				MarkdownDescription: "The list of Portal Proxy Path Rewrite resources to be applied.",
			},
			"portal_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Flightdeck Portal resource.",
				MarkdownDescription: "The name of the Flightdeck Portal resource.",
			},
			"target": schema.StringAttribute{
				Required:            true,
				Description:         "The HTTP target of the Portal Proxy.",
				MarkdownDescription: "The HTTP target of the Portal Proxy.",
			},
		},
		Description: "Represents a Portal Proxy resource.",
	}
}

type PortalProxyModel struct {
	AllowedHeaders types.List   `tfsdk:"allowed_headers"`
	AllowedMethods types.List   `tfsdk:"allowed_methods"`
	ChangeOrigin   types.Bool   `tfsdk:"change_origin"`
	CreatedAt      types.String `tfsdk:"created_at"`
	Credentials    types.String `tfsdk:"credentials"`
	Endpoint       types.String `tfsdk:"endpoint"`
	HttpHeaders    types.List   `tfsdk:"http_headers"`
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	OrganizationId types.String `tfsdk:"organization_id"`
	PathRewrite    types.List   `tfsdk:"path_rewrite"`
	PortalName     types.String `tfsdk:"portal_name"`
	Target         types.String `tfsdk:"target"`
}

var _ basetypes.ObjectTypable = HttpHeadersType{}

type HttpHeadersType struct {
	basetypes.ObjectType
}

func (t HttpHeadersType) Equal(o attr.Type) bool {
	other, ok := o.(HttpHeadersType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t HttpHeadersType) String() string {
	return "HttpHeadersType"
}

func (t HttpHeadersType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return nil, diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return nil, diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return HttpHeadersValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewHttpHeadersValueNull() HttpHeadersValue {
	return HttpHeadersValue{
		state: attr.ValueStateNull,
	}
}

func NewHttpHeadersValueUnknown() HttpHeadersValue {
	return HttpHeadersValue{
		state: attr.ValueStateUnknown,
	}
}

func NewHttpHeadersValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (HttpHeadersValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing HttpHeadersValue Attribute Value",
				"While creating a HttpHeadersValue value, a missing attribute value was detected. "+
					"A HttpHeadersValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HttpHeadersValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid HttpHeadersValue Attribute Type",
				"While creating a HttpHeadersValue value, an invalid attribute value was detected. "+
					"A HttpHeadersValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("HttpHeadersValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("HttpHeadersValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra HttpHeadersValue Attribute Value",
				"While creating a HttpHeadersValue value, an extra attribute value was detected. "+
					"A HttpHeadersValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra HttpHeadersValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewHttpHeadersValueUnknown(), diags
	}

	nameAttribute, ok := attributes["name"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`name is missing from object`)

		return NewHttpHeadersValueUnknown(), diags
	}

	nameVal, ok := nameAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`name expected to be basetypes.StringValue, was: %T`, nameAttribute))
	}

	valueAttribute, ok := attributes["value"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`value is missing from object`)

		return NewHttpHeadersValueUnknown(), diags
	}

	valueVal, ok := valueAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`value expected to be basetypes.StringValue, was: %T`, valueAttribute))
	}

	if diags.HasError() {
		return NewHttpHeadersValueUnknown(), diags
	}

	return HttpHeadersValue{
		Name:  nameVal,
		Value: valueVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewHttpHeadersValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) HttpHeadersValue {
	object, diags := NewHttpHeadersValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewHttpHeadersValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t HttpHeadersType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewHttpHeadersValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewHttpHeadersValueUnknown(), nil
	}

	if in.IsNull() {
		return NewHttpHeadersValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewHttpHeadersValueMust(HttpHeadersValue{}.AttributeTypes(ctx), attributes), nil
}

func (t HttpHeadersType) ValueType(ctx context.Context) attr.Value {
	return HttpHeadersValue{}
}

var _ basetypes.ObjectValuable = HttpHeadersValue{}

type HttpHeadersValue struct {
	Name  basetypes.StringValue `tfsdk:"name"`
	Value basetypes.StringValue `tfsdk:"value"`
	state attr.ValueState
}

func (v HttpHeadersValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["name"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["value"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Name.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["name"] = val

		val, err = v.Value.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["value"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v HttpHeadersValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v HttpHeadersValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v HttpHeadersValue) String() string {
	return "HttpHeadersValue"
}

func (v HttpHeadersValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"name":  v.Name,
			"value": v.Value,
		})

	return objVal, diags
}

func (v HttpHeadersValue) Equal(o attr.Value) bool {
	other, ok := o.(HttpHeadersValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Name.Equal(other.Name) {
		return false
	}

	if !v.Value.Equal(other.Value) {
		return false
	}

	return true
}

func (v HttpHeadersValue) Type(ctx context.Context) attr.Type {
	return HttpHeadersType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v HttpHeadersValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"name":  basetypes.StringType{},
		"value": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = PathRewriteType{}

type PathRewriteType struct {
	basetypes.ObjectType
}

func (t PathRewriteType) Equal(o attr.Type) bool {
	other, ok := o.(PathRewriteType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t PathRewriteType) String() string {
	return "PathRewriteType"
}

func (t PathRewriteType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	dstAttribute, ok := attributes["dst"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst is missing from object`)

		return nil, diags
	}

	dstVal, ok := dstAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst expected to be basetypes.StringValue, was: %T`, dstAttribute))
	}

	srcAttribute, ok := attributes["src"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src is missing from object`)

		return nil, diags
	}

	srcVal, ok := srcAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src expected to be basetypes.StringValue, was: %T`, srcAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return PathRewriteValue{
		Dst:   dstVal,
		Src:   srcVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewPathRewriteValueNull() PathRewriteValue {
	return PathRewriteValue{
		state: attr.ValueStateNull,
	}
}

func NewPathRewriteValueUnknown() PathRewriteValue {
	return PathRewriteValue{
		state: attr.ValueStateUnknown,
	}
}

func NewPathRewriteValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (PathRewriteValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing PathRewriteValue Attribute Value",
				"While creating a PathRewriteValue value, a missing attribute value was detected. "+
					"A PathRewriteValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PathRewriteValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid PathRewriteValue Attribute Type",
				"While creating a PathRewriteValue value, an invalid attribute value was detected. "+
					"A PathRewriteValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("PathRewriteValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("PathRewriteValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra PathRewriteValue Attribute Value",
				"While creating a PathRewriteValue value, an extra attribute value was detected. "+
					"A PathRewriteValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra PathRewriteValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewPathRewriteValueUnknown(), diags
	}

	dstAttribute, ok := attributes["dst"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`dst is missing from object`)

		return NewPathRewriteValueUnknown(), diags
	}

	dstVal, ok := dstAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`dst expected to be basetypes.StringValue, was: %T`, dstAttribute))
	}

	srcAttribute, ok := attributes["src"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`src is missing from object`)

		return NewPathRewriteValueUnknown(), diags
	}

	srcVal, ok := srcAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`src expected to be basetypes.StringValue, was: %T`, srcAttribute))
	}

	if diags.HasError() {
		return NewPathRewriteValueUnknown(), diags
	}

	return PathRewriteValue{
		Dst:   dstVal,
		Src:   srcVal,
		state: attr.ValueStateKnown,
	}, diags
}

func NewPathRewriteValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) PathRewriteValue {
	object, diags := NewPathRewriteValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewPathRewriteValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t PathRewriteType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewPathRewriteValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewPathRewriteValueUnknown(), nil
	}

	if in.IsNull() {
		return NewPathRewriteValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewPathRewriteValueMust(PathRewriteValue{}.AttributeTypes(ctx), attributes), nil
}

func (t PathRewriteType) ValueType(ctx context.Context) attr.Value {
	return PathRewriteValue{}
}

var _ basetypes.ObjectValuable = PathRewriteValue{}

type PathRewriteValue struct {
	Dst   basetypes.StringValue `tfsdk:"dst"`
	Src   basetypes.StringValue `tfsdk:"src"`
	state attr.ValueState
}

func (v PathRewriteValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 2)

	var val tftypes.Value
	var err error

	attrTypes["dst"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["src"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 2)

		val, err = v.Dst.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["dst"] = val

		val, err = v.Src.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["src"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v PathRewriteValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v PathRewriteValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v PathRewriteValue) String() string {
	return "PathRewriteValue"
}

func (v PathRewriteValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"dst": basetypes.StringType{},
		"src": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"dst": v.Dst,
			"src": v.Src,
		})

	return objVal, diags
}

func (v PathRewriteValue) Equal(o attr.Value) bool {
	other, ok := o.(PathRewriteValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.Dst.Equal(other.Dst) {
		return false
	}

	if !v.Src.Equal(other.Src) {
		return false
	}

	return true
}

func (v PathRewriteValue) Type(ctx context.Context) attr.Type {
	return PathRewriteType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v PathRewriteValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"dst": basetypes.StringType{},
		"src": basetypes.StringType{},
	}
}
