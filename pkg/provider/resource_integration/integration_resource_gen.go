// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package resource_integration

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-go/tftypes"
	"strings"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func IntegrationResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The date and time of the resources creation.",
				MarkdownDescription: "The date and time of the resources creation.",
			},
			"github": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"api_base_url": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The base url for the GitHub API, for example https://api.github.com",
						MarkdownDescription: "The base url for the GitHub API, for example https://api.github.com",
					},
					"apps": schema.ListNestedAttribute{
						NestedObject: schema.NestedAttributeObject{
							Attributes: map[string]schema.Attribute{
								"allowed_installation_owners": schema.ListAttribute{
									ElementType:         types.StringType,
									Optional:            true,
									Computed:            true,
									Description:         "List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.\nHowever you can list the installations with the GitHub API. You can find the list of installations here:\nhttps://api.github.com/app/installations\nThe relevant documentation for this is here.\nhttps://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples",
									MarkdownDescription: "List of installation owners allowed to be used by this GitHub app. The GitHub UI does not provide a way to list the installations.\nHowever you can list the installations with the GitHub API. You can find the list of installations here:\nhttps://api.github.com/app/installations\nThe relevant documentation for this is here.\nhttps://docs.github.com/en/rest/reference/apps#list-installations-for-the-authenticated-app--code-samples",
								},
								"app_id": schema.StringAttribute{
									Required:            true,
									Description:         "The numeric GitHub App ID, string for environment variables",
									MarkdownDescription: "The numeric GitHub App ID, string for environment variables",
								},
								"client_id": schema.StringAttribute{
									Required:            true,
									Description:         "The client ID to use",
									MarkdownDescription: "The client ID to use",
								},
								"client_secret": schema.StringAttribute{
									Required:            true,
									Sensitive:           true,
									Description:         "The client secret to use",
									MarkdownDescription: "The client secret to use",
								},
								"private_key": schema.StringAttribute{
									Required:            true,
									Sensitive:           true,
									Description:         "The private key to use for auth against the app",
									MarkdownDescription: "The private key to use for auth against the app",
								},
								"webhook_secret": schema.StringAttribute{
									Required:            true,
									Sensitive:           true,
									Description:         "The secret used for webhooks",
									MarkdownDescription: "The secret used for webhooks",
								},
							},
							CustomType: AppsType{
								ObjectType: types.ObjectType{
									AttrTypes: AppsValue{}.AttributeTypes(ctx),
								},
							},
						},
						Optional:            true,
						Computed:            true,
						Description:         "GitHub Apps configuration",
						MarkdownDescription: "GitHub Apps configuration",
					},
					"host": schema.StringAttribute{
						Required:            true,
						Description:         "The hostname of the given GitHub instance",
						MarkdownDescription: "The hostname of the given GitHub instance",
					},
					"raw_base_url": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The base url for GitHub raw resources, for example https://raw.githubusercontent.com",
						MarkdownDescription: "The base url for GitHub raw resources, for example https://raw.githubusercontent.com",
					},
					"token": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Sensitive:           true,
						Description:         "Token used to authenticate requests.",
						MarkdownDescription: "Token used to authenticate requests.",
					},
				},
				CustomType: GithubType{
					ObjectType: types.ObjectType{
						AttrTypes: GithubValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"gitlab": schema.SingleNestedAttribute{
				Attributes: map[string]schema.Attribute{
					"api_base_url": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The base URL of the Gitlab API.",
						MarkdownDescription: "The base URL of the Gitlab API.",
					},
					"base_url": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "The base URL of the Gitlab instance.",
						MarkdownDescription: "The base URL of the Gitlab instance.",
					},
					"host": schema.StringAttribute{
						Required:            true,
						Description:         "The hostname of the Gitlab instance.",
						MarkdownDescription: "The hostname of the Gitlab instance.",
					},
					"token": schema.StringAttribute{
						Required:            true,
						Sensitive:           true,
						Description:         "Token used to authenticate requests.",
						MarkdownDescription: "Token used to authenticate requests.",
					},
				},
				CustomType: GitlabType{
					ObjectType: types.ObjectType{
						AttrTypes: GitlabValue{}.AttributeTypes(ctx),
					},
				},
				Optional: true,
				Computed: true,
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The ID of the Flightdeck resource.",
				MarkdownDescription: "The ID of the Flightdeck resource.",
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Integration.",
				MarkdownDescription: "The name of the Integration.",
			},
			"organization_id": schema.StringAttribute{
				Required:            true,
				Description:         "The ID of the Flightdeck Organization resource.",
				MarkdownDescription: "The ID of the Flightdeck Organization resource.",
			},
			"portal_name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the Flightdeck Portal resource.",
				MarkdownDescription: "The name of the Flightdeck Portal resource.",
			},
		},
		Description: "Represents an Integration resource.",
	}
}

type IntegrationModel struct {
	CreatedAt      types.String `tfsdk:"created_at"`
	Github         GithubValue  `tfsdk:"github"`
	Gitlab         GitlabValue  `tfsdk:"gitlab"`
	Id             types.String `tfsdk:"id"`
	Name           types.String `tfsdk:"name"`
	OrganizationId types.String `tfsdk:"organization_id"`
	PortalName     types.String `tfsdk:"portal_name"`
}

var _ basetypes.ObjectTypable = GithubType{}

type GithubType struct {
	basetypes.ObjectType
}

func (t GithubType) Equal(o attr.Type) bool {
	other, ok := o.(GithubType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GithubType) String() string {
	return "GithubType"
}

func (t GithubType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiBaseUrlAttribute, ok := attributes["api_base_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_base_url is missing from object`)

		return nil, diags
	}

	apiBaseUrlVal, ok := apiBaseUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_base_url expected to be basetypes.StringValue, was: %T`, apiBaseUrlAttribute))
	}

	appsAttribute, ok := attributes["apps"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`apps is missing from object`)

		return nil, diags
	}

	appsVal, ok := appsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`apps expected to be basetypes.ListValue, was: %T`, appsAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return nil, diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	rawBaseUrlAttribute, ok := attributes["raw_base_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`raw_base_url is missing from object`)

		return nil, diags
	}

	rawBaseUrlVal, ok := rawBaseUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`raw_base_url expected to be basetypes.StringValue, was: %T`, rawBaseUrlAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GithubValue{
		ApiBaseUrl: apiBaseUrlVal,
		Apps:       appsVal,
		Host:       hostVal,
		RawBaseUrl: rawBaseUrlVal,
		Token:      tokenVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewGithubValueNull() GithubValue {
	return GithubValue{
		state: attr.ValueStateNull,
	}
}

func NewGithubValueUnknown() GithubValue {
	return GithubValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGithubValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GithubValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GithubValue Attribute Value",
				"While creating a GithubValue value, a missing attribute value was detected. "+
					"A GithubValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GithubValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GithubValue Attribute Type",
				"While creating a GithubValue value, an invalid attribute value was detected. "+
					"A GithubValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GithubValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GithubValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GithubValue Attribute Value",
				"While creating a GithubValue value, an extra attribute value was detected. "+
					"A GithubValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GithubValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGithubValueUnknown(), diags
	}

	apiBaseUrlAttribute, ok := attributes["api_base_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_base_url is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	apiBaseUrlVal, ok := apiBaseUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_base_url expected to be basetypes.StringValue, was: %T`, apiBaseUrlAttribute))
	}

	appsAttribute, ok := attributes["apps"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`apps is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	appsVal, ok := appsAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`apps expected to be basetypes.ListValue, was: %T`, appsAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	rawBaseUrlAttribute, ok := attributes["raw_base_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`raw_base_url is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	rawBaseUrlVal, ok := rawBaseUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`raw_base_url expected to be basetypes.StringValue, was: %T`, rawBaseUrlAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewGithubValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewGithubValueUnknown(), diags
	}

	return GithubValue{
		ApiBaseUrl: apiBaseUrlVal,
		Apps:       appsVal,
		Host:       hostVal,
		RawBaseUrl: rawBaseUrlVal,
		Token:      tokenVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewGithubValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GithubValue {
	object, diags := NewGithubValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGithubValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GithubType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGithubValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGithubValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGithubValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGithubValueMust(GithubValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GithubType) ValueType(ctx context.Context) attr.Value {
	return GithubValue{}
}

var _ basetypes.ObjectValuable = GithubValue{}

type GithubValue struct {
	ApiBaseUrl basetypes.StringValue `tfsdk:"api_base_url"`
	Apps       basetypes.ListValue   `tfsdk:"apps"`
	Host       basetypes.StringValue `tfsdk:"host"`
	RawBaseUrl basetypes.StringValue `tfsdk:"raw_base_url"`
	Token      basetypes.StringValue `tfsdk:"token"`
	state      attr.ValueState
}

func (v GithubValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 5)

	var val tftypes.Value
	var err error

	attrTypes["api_base_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["apps"] = basetypes.ListType{
		ElemType: AppsValue{}.Type(ctx),
	}.TerraformType(ctx)
	attrTypes["host"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["raw_base_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 5)

		val, err = v.ApiBaseUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_base_url"] = val

		val, err = v.Apps.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["apps"] = val

		val, err = v.Host.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["host"] = val

		val, err = v.RawBaseUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["raw_base_url"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GithubValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GithubValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GithubValue) String() string {
	return "GithubValue"
}

func (v GithubValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	apps := types.ListValueMust(
		AppsType{
			basetypes.ObjectType{
				AttrTypes: AppsValue{}.AttributeTypes(ctx),
			},
		},
		v.Apps.Elements(),
	)

	if v.Apps.IsNull() {
		apps = types.ListNull(
			AppsType{
				basetypes.ObjectType{
					AttrTypes: AppsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	if v.Apps.IsUnknown() {
		apps = types.ListUnknown(
			AppsType{
				basetypes.ObjectType{
					AttrTypes: AppsValue{}.AttributeTypes(ctx),
				},
			},
		)
	}

	attributeTypes := map[string]attr.Type{
		"api_base_url": basetypes.StringType{},
		"apps": basetypes.ListType{
			ElemType: AppsValue{}.Type(ctx),
		},
		"host":         basetypes.StringType{},
		"raw_base_url": basetypes.StringType{},
		"token":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api_base_url": v.ApiBaseUrl,
			"apps":         apps,
			"host":         v.Host,
			"raw_base_url": v.RawBaseUrl,
			"token":        v.Token,
		})

	return objVal, diags
}

func (v GithubValue) Equal(o attr.Value) bool {
	other, ok := o.(GithubValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiBaseUrl.Equal(other.ApiBaseUrl) {
		return false
	}

	if !v.Apps.Equal(other.Apps) {
		return false
	}

	if !v.Host.Equal(other.Host) {
		return false
	}

	if !v.RawBaseUrl.Equal(other.RawBaseUrl) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v GithubValue) Type(ctx context.Context) attr.Type {
	return GithubType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GithubValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_base_url": basetypes.StringType{},
		"apps": basetypes.ListType{
			ElemType: AppsValue{}.Type(ctx),
		},
		"host":         basetypes.StringType{},
		"raw_base_url": basetypes.StringType{},
		"token":        basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = AppsType{}

type AppsType struct {
	basetypes.ObjectType
}

func (t AppsType) Equal(o attr.Type) bool {
	other, ok := o.(AppsType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t AppsType) String() string {
	return "AppsType"
}

func (t AppsType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	allowedInstallationOwnersAttribute, ok := attributes["allowed_installation_owners"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allowed_installation_owners is missing from object`)

		return nil, diags
	}

	allowedInstallationOwnersVal, ok := allowedInstallationOwnersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allowed_installation_owners expected to be basetypes.ListValue, was: %T`, allowedInstallationOwnersAttribute))
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return nil, diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return nil, diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return nil, diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	privateKeyAttribute, ok := attributes["private_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_key is missing from object`)

		return nil, diags
	}

	privateKeyVal, ok := privateKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_key expected to be basetypes.StringValue, was: %T`, privateKeyAttribute))
	}

	webhookSecretAttribute, ok := attributes["webhook_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`webhook_secret is missing from object`)

		return nil, diags
	}

	webhookSecretVal, ok := webhookSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`webhook_secret expected to be basetypes.StringValue, was: %T`, webhookSecretAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return AppsValue{
		AllowedInstallationOwners: allowedInstallationOwnersVal,
		AppId:                     appIdVal,
		ClientId:                  clientIdVal,
		ClientSecret:              clientSecretVal,
		PrivateKey:                privateKeyVal,
		WebhookSecret:             webhookSecretVal,
		state:                     attr.ValueStateKnown,
	}, diags
}

func NewAppsValueNull() AppsValue {
	return AppsValue{
		state: attr.ValueStateNull,
	}
}

func NewAppsValueUnknown() AppsValue {
	return AppsValue{
		state: attr.ValueStateUnknown,
	}
}

func NewAppsValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (AppsValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing AppsValue Attribute Value",
				"While creating a AppsValue value, a missing attribute value was detected. "+
					"A AppsValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppsValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid AppsValue Attribute Type",
				"While creating a AppsValue value, an invalid attribute value was detected. "+
					"A AppsValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("AppsValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("AppsValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra AppsValue Attribute Value",
				"While creating a AppsValue value, an extra attribute value was detected. "+
					"A AppsValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra AppsValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewAppsValueUnknown(), diags
	}

	allowedInstallationOwnersAttribute, ok := attributes["allowed_installation_owners"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`allowed_installation_owners is missing from object`)

		return NewAppsValueUnknown(), diags
	}

	allowedInstallationOwnersVal, ok := allowedInstallationOwnersAttribute.(basetypes.ListValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`allowed_installation_owners expected to be basetypes.ListValue, was: %T`, allowedInstallationOwnersAttribute))
	}

	appIdAttribute, ok := attributes["app_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`app_id is missing from object`)

		return NewAppsValueUnknown(), diags
	}

	appIdVal, ok := appIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`app_id expected to be basetypes.StringValue, was: %T`, appIdAttribute))
	}

	clientIdAttribute, ok := attributes["client_id"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_id is missing from object`)

		return NewAppsValueUnknown(), diags
	}

	clientIdVal, ok := clientIdAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_id expected to be basetypes.StringValue, was: %T`, clientIdAttribute))
	}

	clientSecretAttribute, ok := attributes["client_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`client_secret is missing from object`)

		return NewAppsValueUnknown(), diags
	}

	clientSecretVal, ok := clientSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`client_secret expected to be basetypes.StringValue, was: %T`, clientSecretAttribute))
	}

	privateKeyAttribute, ok := attributes["private_key"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`private_key is missing from object`)

		return NewAppsValueUnknown(), diags
	}

	privateKeyVal, ok := privateKeyAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`private_key expected to be basetypes.StringValue, was: %T`, privateKeyAttribute))
	}

	webhookSecretAttribute, ok := attributes["webhook_secret"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`webhook_secret is missing from object`)

		return NewAppsValueUnknown(), diags
	}

	webhookSecretVal, ok := webhookSecretAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`webhook_secret expected to be basetypes.StringValue, was: %T`, webhookSecretAttribute))
	}

	if diags.HasError() {
		return NewAppsValueUnknown(), diags
	}

	return AppsValue{
		AllowedInstallationOwners: allowedInstallationOwnersVal,
		AppId:                     appIdVal,
		ClientId:                  clientIdVal,
		ClientSecret:              clientSecretVal,
		PrivateKey:                privateKeyVal,
		WebhookSecret:             webhookSecretVal,
		state:                     attr.ValueStateKnown,
	}, diags
}

func NewAppsValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) AppsValue {
	object, diags := NewAppsValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewAppsValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t AppsType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewAppsValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewAppsValueUnknown(), nil
	}

	if in.IsNull() {
		return NewAppsValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewAppsValueMust(AppsValue{}.AttributeTypes(ctx), attributes), nil
}

func (t AppsType) ValueType(ctx context.Context) attr.Value {
	return AppsValue{}
}

var _ basetypes.ObjectValuable = AppsValue{}

type AppsValue struct {
	AllowedInstallationOwners basetypes.ListValue   `tfsdk:"allowed_installation_owners"`
	AppId                     basetypes.StringValue `tfsdk:"app_id"`
	ClientId                  basetypes.StringValue `tfsdk:"client_id"`
	ClientSecret              basetypes.StringValue `tfsdk:"client_secret"`
	PrivateKey                basetypes.StringValue `tfsdk:"private_key"`
	WebhookSecret             basetypes.StringValue `tfsdk:"webhook_secret"`
	state                     attr.ValueState
}

func (v AppsValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 6)

	var val tftypes.Value
	var err error

	attrTypes["allowed_installation_owners"] = basetypes.ListType{
		ElemType: types.StringType,
	}.TerraformType(ctx)
	attrTypes["app_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_id"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["client_secret"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["private_key"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["webhook_secret"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 6)

		val, err = v.AllowedInstallationOwners.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["allowed_installation_owners"] = val

		val, err = v.AppId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["app_id"] = val

		val, err = v.ClientId.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_id"] = val

		val, err = v.ClientSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["client_secret"] = val

		val, err = v.PrivateKey.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["private_key"] = val

		val, err = v.WebhookSecret.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["webhook_secret"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v AppsValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v AppsValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v AppsValue) String() string {
	return "AppsValue"
}

func (v AppsValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	var allowedInstallationOwnersVal basetypes.ListValue
	switch {
	case v.AllowedInstallationOwners.IsUnknown():
		allowedInstallationOwnersVal = types.ListUnknown(types.StringType)
	case v.AllowedInstallationOwners.IsNull():
		allowedInstallationOwnersVal = types.ListNull(types.StringType)
	default:
		var d diag.Diagnostics
		allowedInstallationOwnersVal, d = types.ListValue(types.StringType, v.AllowedInstallationOwners.Elements())
		diags.Append(d...)
	}

	if diags.HasError() {
		return types.ObjectUnknown(map[string]attr.Type{
			"allowed_installation_owners": basetypes.ListType{
				ElemType: types.StringType,
			},
			"app_id":         basetypes.StringType{},
			"client_id":      basetypes.StringType{},
			"client_secret":  basetypes.StringType{},
			"private_key":    basetypes.StringType{},
			"webhook_secret": basetypes.StringType{},
		}), diags
	}

	attributeTypes := map[string]attr.Type{
		"allowed_installation_owners": basetypes.ListType{
			ElemType: types.StringType,
		},
		"app_id":         basetypes.StringType{},
		"client_id":      basetypes.StringType{},
		"client_secret":  basetypes.StringType{},
		"private_key":    basetypes.StringType{},
		"webhook_secret": basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"allowed_installation_owners": allowedInstallationOwnersVal,
			"app_id":                      v.AppId,
			"client_id":                   v.ClientId,
			"client_secret":               v.ClientSecret,
			"private_key":                 v.PrivateKey,
			"webhook_secret":              v.WebhookSecret,
		})

	return objVal, diags
}

func (v AppsValue) Equal(o attr.Value) bool {
	other, ok := o.(AppsValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.AllowedInstallationOwners.Equal(other.AllowedInstallationOwners) {
		return false
	}

	if !v.AppId.Equal(other.AppId) {
		return false
	}

	if !v.ClientId.Equal(other.ClientId) {
		return false
	}

	if !v.ClientSecret.Equal(other.ClientSecret) {
		return false
	}

	if !v.PrivateKey.Equal(other.PrivateKey) {
		return false
	}

	if !v.WebhookSecret.Equal(other.WebhookSecret) {
		return false
	}

	return true
}

func (v AppsValue) Type(ctx context.Context) attr.Type {
	return AppsType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v AppsValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"allowed_installation_owners": basetypes.ListType{
			ElemType: types.StringType,
		},
		"app_id":         basetypes.StringType{},
		"client_id":      basetypes.StringType{},
		"client_secret":  basetypes.StringType{},
		"private_key":    basetypes.StringType{},
		"webhook_secret": basetypes.StringType{},
	}
}

var _ basetypes.ObjectTypable = GitlabType{}

type GitlabType struct {
	basetypes.ObjectType
}

func (t GitlabType) Equal(o attr.Type) bool {
	other, ok := o.(GitlabType)

	if !ok {
		return false
	}

	return t.ObjectType.Equal(other.ObjectType)
}

func (t GitlabType) String() string {
	return "GitlabType"
}

func (t GitlabType) ValueFromObject(ctx context.Context, in basetypes.ObjectValue) (basetypes.ObjectValuable, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributes := in.Attributes()

	apiBaseUrlAttribute, ok := attributes["api_base_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_base_url is missing from object`)

		return nil, diags
	}

	apiBaseUrlVal, ok := apiBaseUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_base_url expected to be basetypes.StringValue, was: %T`, apiBaseUrlAttribute))
	}

	baseUrlAttribute, ok := attributes["base_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`base_url is missing from object`)

		return nil, diags
	}

	baseUrlVal, ok := baseUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`base_url expected to be basetypes.StringValue, was: %T`, baseUrlAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return nil, diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return nil, diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return nil, diags
	}

	return GitlabValue{
		ApiBaseUrl: apiBaseUrlVal,
		BaseUrl:    baseUrlVal,
		Host:       hostVal,
		Token:      tokenVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewGitlabValueNull() GitlabValue {
	return GitlabValue{
		state: attr.ValueStateNull,
	}
}

func NewGitlabValueUnknown() GitlabValue {
	return GitlabValue{
		state: attr.ValueStateUnknown,
	}
}

func NewGitlabValue(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) (GitlabValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	// Reference: https://github.com/hashicorp/terraform-plugin-framework/issues/521
	ctx := context.Background()

	for name, attributeType := range attributeTypes {
		attribute, ok := attributes[name]

		if !ok {
			diags.AddError(
				"Missing GitlabValue Attribute Value",
				"While creating a GitlabValue value, a missing attribute value was detected. "+
					"A GitlabValue must contain values for all attributes, even if null or unknown. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Expected Type: %s", name, attributeType.String()),
			)

			continue
		}

		if !attributeType.Equal(attribute.Type(ctx)) {
			diags.AddError(
				"Invalid GitlabValue Attribute Type",
				"While creating a GitlabValue value, an invalid attribute value was detected. "+
					"A GitlabValue must use a matching attribute type for the value. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Expected Type: %s\n", name, attributeType.String())+
					fmt.Sprintf("GitlabValue Attribute Name (%s) Given Type: %s", name, attribute.Type(ctx)),
			)
		}
	}

	for name := range attributes {
		_, ok := attributeTypes[name]

		if !ok {
			diags.AddError(
				"Extra GitlabValue Attribute Value",
				"While creating a GitlabValue value, an extra attribute value was detected. "+
					"A GitlabValue must not contain values beyond the expected attribute types. "+
					"This is always an issue with the provider and should be reported to the provider developers.\n\n"+
					fmt.Sprintf("Extra GitlabValue Attribute Name: %s", name),
			)
		}
	}

	if diags.HasError() {
		return NewGitlabValueUnknown(), diags
	}

	apiBaseUrlAttribute, ok := attributes["api_base_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`api_base_url is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	apiBaseUrlVal, ok := apiBaseUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`api_base_url expected to be basetypes.StringValue, was: %T`, apiBaseUrlAttribute))
	}

	baseUrlAttribute, ok := attributes["base_url"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`base_url is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	baseUrlVal, ok := baseUrlAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`base_url expected to be basetypes.StringValue, was: %T`, baseUrlAttribute))
	}

	hostAttribute, ok := attributes["host"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`host is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	hostVal, ok := hostAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`host expected to be basetypes.StringValue, was: %T`, hostAttribute))
	}

	tokenAttribute, ok := attributes["token"]

	if !ok {
		diags.AddError(
			"Attribute Missing",
			`token is missing from object`)

		return NewGitlabValueUnknown(), diags
	}

	tokenVal, ok := tokenAttribute.(basetypes.StringValue)

	if !ok {
		diags.AddError(
			"Attribute Wrong Type",
			fmt.Sprintf(`token expected to be basetypes.StringValue, was: %T`, tokenAttribute))
	}

	if diags.HasError() {
		return NewGitlabValueUnknown(), diags
	}

	return GitlabValue{
		ApiBaseUrl: apiBaseUrlVal,
		BaseUrl:    baseUrlVal,
		Host:       hostVal,
		Token:      tokenVal,
		state:      attr.ValueStateKnown,
	}, diags
}

func NewGitlabValueMust(attributeTypes map[string]attr.Type, attributes map[string]attr.Value) GitlabValue {
	object, diags := NewGitlabValue(attributeTypes, attributes)

	if diags.HasError() {
		// This could potentially be added to the diag package.
		diagsStrings := make([]string, 0, len(diags))

		for _, diagnostic := range diags {
			diagsStrings = append(diagsStrings, fmt.Sprintf(
				"%s | %s | %s",
				diagnostic.Severity(),
				diagnostic.Summary(),
				diagnostic.Detail()))
		}

		panic("NewGitlabValueMust received error(s): " + strings.Join(diagsStrings, "\n"))
	}

	return object
}

func (t GitlabType) ValueFromTerraform(ctx context.Context, in tftypes.Value) (attr.Value, error) {
	if in.Type() == nil {
		return NewGitlabValueNull(), nil
	}

	if !in.Type().Equal(t.TerraformType(ctx)) {
		return nil, fmt.Errorf("expected %s, got %s", t.TerraformType(ctx), in.Type())
	}

	if !in.IsKnown() {
		return NewGitlabValueUnknown(), nil
	}

	if in.IsNull() {
		return NewGitlabValueNull(), nil
	}

	attributes := map[string]attr.Value{}

	val := map[string]tftypes.Value{}

	err := in.As(&val)

	if err != nil {
		return nil, err
	}

	for k, v := range val {
		a, err := t.AttrTypes[k].ValueFromTerraform(ctx, v)

		if err != nil {
			return nil, err
		}

		attributes[k] = a
	}

	return NewGitlabValueMust(GitlabValue{}.AttributeTypes(ctx), attributes), nil
}

func (t GitlabType) ValueType(ctx context.Context) attr.Value {
	return GitlabValue{}
}

var _ basetypes.ObjectValuable = GitlabValue{}

type GitlabValue struct {
	ApiBaseUrl basetypes.StringValue `tfsdk:"api_base_url"`
	BaseUrl    basetypes.StringValue `tfsdk:"base_url"`
	Host       basetypes.StringValue `tfsdk:"host"`
	Token      basetypes.StringValue `tfsdk:"token"`
	state      attr.ValueState
}

func (v GitlabValue) ToTerraformValue(ctx context.Context) (tftypes.Value, error) {
	attrTypes := make(map[string]tftypes.Type, 4)

	var val tftypes.Value
	var err error

	attrTypes["api_base_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["base_url"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["host"] = basetypes.StringType{}.TerraformType(ctx)
	attrTypes["token"] = basetypes.StringType{}.TerraformType(ctx)

	objectType := tftypes.Object{AttributeTypes: attrTypes}

	switch v.state {
	case attr.ValueStateKnown:
		vals := make(map[string]tftypes.Value, 4)

		val, err = v.ApiBaseUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["api_base_url"] = val

		val, err = v.BaseUrl.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["base_url"] = val

		val, err = v.Host.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["host"] = val

		val, err = v.Token.ToTerraformValue(ctx)

		if err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		vals["token"] = val

		if err := tftypes.ValidateValue(objectType, vals); err != nil {
			return tftypes.NewValue(objectType, tftypes.UnknownValue), err
		}

		return tftypes.NewValue(objectType, vals), nil
	case attr.ValueStateNull:
		return tftypes.NewValue(objectType, nil), nil
	case attr.ValueStateUnknown:
		return tftypes.NewValue(objectType, tftypes.UnknownValue), nil
	default:
		panic(fmt.Sprintf("unhandled Object state in ToTerraformValue: %s", v.state))
	}
}

func (v GitlabValue) IsNull() bool {
	return v.state == attr.ValueStateNull
}

func (v GitlabValue) IsUnknown() bool {
	return v.state == attr.ValueStateUnknown
}

func (v GitlabValue) String() string {
	return "GitlabValue"
}

func (v GitlabValue) ToObjectValue(ctx context.Context) (basetypes.ObjectValue, diag.Diagnostics) {
	var diags diag.Diagnostics

	attributeTypes := map[string]attr.Type{
		"api_base_url": basetypes.StringType{},
		"base_url":     basetypes.StringType{},
		"host":         basetypes.StringType{},
		"token":        basetypes.StringType{},
	}

	if v.IsNull() {
		return types.ObjectNull(attributeTypes), diags
	}

	if v.IsUnknown() {
		return types.ObjectUnknown(attributeTypes), diags
	}

	objVal, diags := types.ObjectValue(
		attributeTypes,
		map[string]attr.Value{
			"api_base_url": v.ApiBaseUrl,
			"base_url":     v.BaseUrl,
			"host":         v.Host,
			"token":        v.Token,
		})

	return objVal, diags
}

func (v GitlabValue) Equal(o attr.Value) bool {
	other, ok := o.(GitlabValue)

	if !ok {
		return false
	}

	if v.state != other.state {
		return false
	}

	if v.state != attr.ValueStateKnown {
		return true
	}

	if !v.ApiBaseUrl.Equal(other.ApiBaseUrl) {
		return false
	}

	if !v.BaseUrl.Equal(other.BaseUrl) {
		return false
	}

	if !v.Host.Equal(other.Host) {
		return false
	}

	if !v.Token.Equal(other.Token) {
		return false
	}

	return true
}

func (v GitlabValue) Type(ctx context.Context) attr.Type {
	return GitlabType{
		basetypes.ObjectType{
			AttrTypes: v.AttributeTypes(ctx),
		},
	}
}

func (v GitlabValue) AttributeTypes(ctx context.Context) map[string]attr.Type {
	return map[string]attr.Type{
		"api_base_url": basetypes.StringType{},
		"base_url":     basetypes.StringType{},
		"host":         basetypes.StringType{},
		"token":        basetypes.StringType{},
	}
}
